[{"path":"https://telkamp7.github.io/aedseo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 aedseo authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"Understanding seasonality respiratory virus infections crucial countries make informed recommendations concerning timing monoclonal antibody provision, particularly treatment prophylaxis children exposed respiratory syncytial virus (RSV) first year(s) life, primarily premature infants Teirlinck et al. (2023). Moreover, timely detection epidemic onset potential guide empirical antiviral therapy hospitalized patients suspected influenza (McGeer 2009). , turn, contributes reduction health economic burden caused respiratory virus infections. Achieving accurate identification beginning seasonal respiratory epidemics necessitates regular prompt data collection, coupled standardized procedure continuous data analysis. wide range statistical methods disposal defining influenza epidemics. last two decades, techniques Serfling-based models dynamic linear models, rely recent data Pelat et al. (2007), extensively employed purpose. package revolves around timely detection onset seasonal respiratory epidemics.","code":""},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo.html","id":"methodology","dir":"Articles","previous_headings":"","what":"Methodology","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"methodology used detect onset seasonal respiratory epidemics can divided two essential criteria: local estimate exponential growth rate, \\(r\\), significantly greater zero. sum cases (SoC) past \\(k\\) units time exceeds disease-specific threshold. , \\(k\\) denotes window size employed obtain local estimate exponential growth rate SoC. criteria met, alarm triggered onset seasonal epidemic detected.","code":""},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo.html","id":"exponential-growth-rate","dir":"Articles","previous_headings":"Methodology","what":"Exponential growth rate","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"Inspired Obadia, Haneef, Boelle (2012) exponential growth rate, denoted \\(r\\), represents per capita change number new cases per unit time. Given incidence data integer-valued, proposed method relies generalized linear models (GLM). count data, Poisson distribution suitable choice model. Hence, count observations denoted \\(Y\\) assumed follow Poisson distribution \\[\\begin{equation} Y \\sim \\Pois(\\lambda) \\end{equation}\\] , link function, \\(\\log()\\), connects linear predictor expected value data point, expressed \\(\\log(\\lambda)=\\mu\\). Given single continuous covariate \\(t\\), mean \\(\\mu\\) can expressed \\[\\begin{equation}   \\mu = \\alpha + r t \\end{equation}\\] equivalent multiplicative model \\(\\lambda\\), .e. \\[\\begin{equation}   \\lambda = \\exp(\\alpha + r t) = \\exp(\\alpha) \\exp(r t) \\end{equation}\\] Intuitively, negative values \\(r\\) result decline number observed cases, \\(r=0\\) represents stability, positive values \\(r\\) indicate increase. direct relationship growth rates reproductive numbers elaborated study Wallinga Lipsitch (2007). important note Poisson distribution assumes mean variance equal. reality, real data often deviate assumption, variance (\\(v\\)) significantly larger mean. biological phenomenon, known overdispersion, can addressed within model various ways. One approach employ quasi-Poisson regression, assumes \\(v=\\sigma\\lambda\\), use negative binomial regression, assumes \\(v=\\lambda+\\lambda^2/\\theta\\), \\(\\sigma\\) \\(\\theta\\) overdispersion parameters.","code":""},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo.html","id":"simulations","dir":"Articles","previous_headings":"","what":"Simulations","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"assess effectiveness proposed algorithm, simulation study conducted. simulated data generated using negative binomial model mean parameter \\(\\mu\\) variance parameter \\(\\phi\\mu\\). context, \\(\\phi\\) denotes dispersion parameter, assumed greater equal 1. mean, denoted \\(\\mu(t)\\), defined linear predictor incorporates trend component seasonality components represented Fourier terms. equation \\(\\mu(t)\\) follows: \\[\\begin{equation}   \\mu(t) = \\exp\\Biggl( \\theta + \\beta t + \\sum_{j=1}^m \\biggl( \\gamma_{\\sin} \\sin\\Bigl( \\frac{2 \\pi t}{52}\\Bigl) + \\gamma_{\\cos} \\cos \\Bigl( \\frac{2 \\pi t}{52} \\Bigl) \\biggl) \\Biggl) \\end{equation}\\] accommodate variety scenarios encountered practical applications, simulations generated using different combinations parameters. parameters include baseline frequencies reports denoted \\(\\theta\\), trends represented \\(\\beta\\), seasonal patterns characterized \\(\\gamma_{\\sin}\\) \\(\\gamma_{\\cos}\\), well dispersions indicated \\(\\phi\\). list specific parameter combinations provided Table XX. Parameters criteria generate 40 scenarios.","code":"# TODO: #7 Conduct the simulation study and write the article on the `aedseo` # package. @telkamp7 parameter_combinations <- as_tibble(expand_grid(   theta = c(3, 4, 5, 6, 7),   beta = c(0.001),   gamma_sin = c(1, 2),   gamma_cos = c(1, 2),   phi = c(1, 2) ))  parameter_combinations %>%   mutate(Scenario = row_number()) %>%   select(Scenario, theta:phi) %>%   rename(     `$\\\\theta$` = theta,     `$\\\\beta$` = beta,     `$\\\\gamma_{\\\\sin}$` = gamma_sin,     `$\\\\gamma_{\\\\cos}$` = gamma_cos,     `$\\\\phi$` = phi   ) %>%   kbl(     booktabs = TRUE,     escape = FALSE,     align = \"l\",     caption = \"Parameters and criteria to generate the 40 scenarios.\",     linesep = c(rep(\"\", 7), \"\\\\addlinespace\")   ) %>%   kable_paper(latex_options = c(\"HOLD_position\")) mu_t <- function(     t,     theta = 1,     exp_beta = 1.001,     gamma_sin = 1,     gamma_cos = 1,     trend = 1,     j = 1,     ...) {   # Start construction of linear predictor   linear_predictor <- theta   # ... add a trend if the scenario request it   if (trend == 1) {     linear_predictor <- linear_predictor + log(exp_beta) * t   }   # ... add a seasonal component   linear_predictor <- linear_predictor +     gamma_sin * sin(2 * pi * t * j / 52) +     gamma_cos * cos(2 * pi * t * j / 52)    return(exp(linear_predictor)) }  simulate_from_nbinom <- function(...) {   # Set some default values for the simulation   default_pars <- list(     \"t\" = 1,     \"theta\" = 1,     \"exp_beta\" = 1.001,     \"gamma_sin\" = 1,     \"gamma_cos\" = 1,     \"trend\" = 1,     \"j\" = 1,     \"phi\" = 1,     \"seed\" = 42   )    # Match call   mc <- as.list(match.call())[-1]   # ... and change parameters relative to the call   index_mc <- !names(default_pars) %in% names(mc)   mc <- append(mc, default_pars[index_mc])[names(default_pars)]    # Set the seed   set.seed(mc$seed)    # Calculate the number of time points   n <- length(eval(mc$t))   # Calculate mu_t   mu_t_scenario <- do.call(what = \"mu_t\", args = mc)   # ... and compute the variance of the negative binomial distribution   variance <- mu_t_scenario * mc$phi   # ... and infer the size in the negative binomial distribution   size <- (mu_t_scenario + mu_t_scenario^2) / variance   # Plugin and simulate the data   simulation <- rnbinom(n = n, mu = mu_t_scenario, size = size)    return(list(\"mu_t\" = mu_t_scenario, \"simulation\" = simulation, \"pars\" = mc)) } # Define the number of years and the number of months within a year years <- 3 weeks <- 52 # ... calculate the total number of observations n <- years * weeks # ... and a vector containing the overall time passed time_overall <- 1:n # Create arbitrary dates dates <- as.POSIXct(   x = time_overall * 86400 * 7,   origin = \"2010-01-01\",   tz = \"UTC\",   format = \"%F\" )  # Simulate the data simulation <- simulate_from_nbinom(t = time_overall)  # Collect the data in a 'tibble' sim_data <- tibble(   Date = dates,   mu_t = simulation$mu_t,   y = simulation$simulation )  # Have a glance at the time varying mean sim_data %>%   pivot_longer(cols = mu_t:y, names_to = \"type\", values_to = \"value\") %>%   ggplot(mapping = aes(x = Date, y = value)) +   geom_line() +   geom_point() +   facet_wrap(facets = vars(type), ncol = 1) sim_data %>%   ggplot(mapping = aes(x = Date)) +   geom_line(mapping = aes(y = mu_t)) +   geom_point(mapping = aes(y = y)) # Construct a 'tsibble' object with the time series data tsd_data <- tsd(   observed = simulation$simulation,   time = dates,   time_interval = \"week\" )  # Apply the 'aedseo' algorithm aedseo_results <- aedseo(   tsd = tsd_data,   k = 5,   level = 0.95,   family = \"quasipoisson\" )  # Visualize the growth rate aedseo_results %>%   ggplot(mapping = aes(x = reference_time, y = growth_rate)) +   geom_line() +   geom_ribbon(     mapping = aes(       ymin = lower_growth_rate,       ymax = upper_growth_rate     ),     alpha = 0.3   ) +   geom_hline(yintercept = 0, linetype = \"dashed\") aedseo_results %>%   ggplot(mapping = aes(x = reference_time)) +   geom_point(mapping = aes(y = growth_rate, alpha = growth_warning)) +   geom_errorbar(     mapping = aes(       ymin = lower_growth_rate,       ymax = upper_growth_rate,       alpha = growth_warning     )   ) +   geom_hline(yintercept = 0, linetype = \"dashed\") #> Warning: Using alpha for a discrete variable is not advised."},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo_introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Automated Detection of Seasonal Epidemic Onset in R","text":"methodology used detect onset seasonal respiratory epidemics can divided two essential criteria: local estimate exponential growth rate, \\(r\\), significantly greater zero. sum cases (SoC) past \\(k\\) units time exceeds disease-specific threshold. , \\(k\\) denotes window size employed obtain local estimate exponential growth rate SoC. criteria met, alarm triggered onset seasonal epidemic detected.","code":""},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo_introduction.html","id":"simulations","dir":"Articles","previous_headings":"","what":"Simulations","title":"Automated Detection of Seasonal Epidemic Onset in R","text":"assess effectiveness aedseo function, simulate data. simulated data generated using negative binomial model mean parameter \\(\\mu\\) variance parameter \\(\\phi\\mu\\). context \\(\\phi\\) denotes dispersion parameter, assumed greater equal 1. mean, denoted \\(\\mu(t)\\), defined linear predictor incorporates trend component seasonality components represented Fourier terms. equation \\(\\mu(t)\\) follows: \\[\\begin{equation}   \\mu(t) = \\exp\\Biggl( \\theta + \\beta t + \\sum_{j=1}^m \\biggl( \\gamma_{\\sin} \\sin\\Bigl( \\frac{2 \\pi t}{52}\\Bigl) + \\gamma_{\\cos} \\cos \\Bigl( \\frac{2 \\pi t}{52} \\Bigl) \\biggl) \\Biggl) \\end{equation}\\] total three years weekly data simulated following set parameters: \\(\\theta=\\log(1000)\\), representing average intensity 1000 cases. \\(\\exp(\\beta)=1.001\\), indicating slowly increasing trend. \\(\\gamma_{\\sin} = 1\\) \\(\\gamma_{\\cos} = 1\\), representing seasonality component. \\(\\phi = 5\\), represents dispersion parameter negative binomial distribution. following figure, simulated data (solid circles) visualized alongside mean (solid line) three arbitrary years weekly data.","code":"mu_t <- function(     t,     theta = 1,     exp_beta = 1.001,     gamma_sin = 1,     gamma_cos = 1,     trend = 1,     j = 1,     ...) {   # Start construction of linear predictor   linear_predictor <- theta   # ... add a trend if the scenario request it   if (trend == 1) {     linear_predictor <- linear_predictor + log(exp_beta) * t   }   # ... add a seasonal component   linear_predictor <- linear_predictor +     gamma_sin * sin(2 * pi * t * j / 52) + gamma_cos * cos(2 * pi * t * j / 52)    return(exp(linear_predictor)) }  simulate_from_nbinom <- function(...) {   # Set some default values for the simulation   default_pars <- list(     \"t\" = 1,     \"theta\" = 1,     \"exp_beta\" = 1.001,     \"gamma_sin\" = 1,     \"gamma_cos\" = 1,     \"trend\" = 1,     \"j\" = 1,     \"phi\" = 1,     \"seed\" = 42   )    # Match call   mc <- as.list(match.call())[-1]   # ... and change parameters relative to the call   index_mc <- !names(default_pars) %in% names(mc)   mc <- append(mc, default_pars[index_mc])[names(default_pars)]    # Set the seed   set.seed(mc$seed)    # Calculate the number of time points   n <- length(eval(mc$t))   # Calculate mu_t   mu_t_scenario <- do.call(what = \"mu_t\", args = mc)   # ... and compute the variance of the negative binomial distribution   variance <- mu_t_scenario * mc$phi   # ... and infer the size in the negative binomial distribution   size <- (mu_t_scenario + mu_t_scenario^2) / variance   # Plugin and simulate the data   simulation <- rnbinom(n = n, mu = mu_t_scenario, size = size)    return(list(\"mu_t\" = mu_t_scenario, \"simulation\" = simulation, \"pars\" = mc)) }  # Define the number of years and the number of months within a year years <- 3 weeks <- 52 # ... calculate the total number of observations n <- years * weeks # ... and a vector containing the overall time passed time_overall <- 1:n # Create arbitrary dates dates <- seq.Date(from = as.Date(\"2010-01-01\"), by = \"week\", length.out = n)   # Simulate the data simulation <- simulate_from_nbinom(t = time_overall, theta = log(1000), phi = 5)  # Collect the data in a 'tibble' sim_data <- tibble(   Date = dates,   mu_t = simulation$mu_t,   y = simulation$simulation ) # Have a glance at the time varying mean and the simulated data sim_data %>%   ggplot(mapping = aes(x = Date)) +   geom_line(mapping = aes(y = mu_t)) +   geom_point(mapping = aes(y = y))"},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo_introduction.html","id":"applying-the-algorithm","dir":"Articles","previous_headings":"","what":"Applying the algorithm","title":"Automated Detection of Seasonal Epidemic Onset in R","text":"following section, application algorithm simulated data outlined. first step transform simulated data aedseo_tsd object using tsd() function. Next, time series data object passed aedseo() function. , window width \\(k=5\\) specified, meaning total 5 weeks used local estimate exponential growth rate. Additionally, 95% confidence interval specified. Finally, exponential growth rate estimated using quasi-Poisson regression account overdispersion data. figure , observed values simulations visualized alongside local estimate growth rate corresponding 95% confidence interval.","code":"# Construct an 'aedseo_tsd' object with the time series data tsd_data <- tsd(   observed = simulation$simulation,   time = dates,   time_interval = \"week\" ) # Apply the 'aedseo' algorithm aedseo_results <- aedseo(   tsd = tsd_data,   k = 5,   level = 0.95,   disease_threshold = 2000,   family = \"quasipoisson\" ) # Join the observations and estimated growth rates full_data <- full_join(   x = tsd_data,   y = aedseo_results,   by = join_by(\"time\" == \"reference_time\", \"observed\" == \"observed\") )  # Data to add horizontal line in growth rate ablines <- tibble(name = c(\"growth_rate\", \"observed\"), x = c(0, NA))  # Make a nice plot full_data %>%   pivot_longer(cols = c(observed, growth_rate)) %>%   ggplot(     mapping = aes(       x = time,       y = value     )   ) +   geom_line() +   geom_point(     data = aedseo_results %>%       mutate(name = \"observed\"),     mapping = aes(       x = reference_time,       y = observed,       alpha = seasonal_onset_alarm     )   ) +   geom_ribbon(     data = aedseo_results %>%       mutate(name = \"growth_rate\"),     mapping = aes(       x = reference_time,       ymin = lower_growth_rate,       ymax = upper_growth_rate     ),     inherit.aes = FALSE, alpha = 0.3   ) +   geom_hline(     data = ablines,     mapping = aes(yintercept = x),     linetype = \"dashed\"   ) +   facet_wrap(     facets = vars(name),     ncol = 1,     scale = \"free_y\"   ) +   theme(     legend.position = \"top\"   ) #> Warning: Using alpha for a discrete variable is not advised. #> Warning: Removed 4 rows containing missing values (`geom_line()`). #> Warning: Removed 1 rows containing missing values (`geom_hline()`)."},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo_introduction.html","id":"the-aedseo-package-implements-s3-methods","dir":"Articles","previous_headings":"","what":"The aedseo package implements S3 methods","title":"Automated Detection of Seasonal Epidemic Onset in R","text":"section, explore use predict summary S3 methods provided aedseo package. methods enhance functionality aedseo objects, allowing make predictions obtain concise summaries analysis results.","code":""},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo_introduction.html","id":"predicting-growth-rates","dir":"Articles","previous_headings":"The aedseo package implements S3 methods","what":"Predicting Growth Rates","title":"Automated Detection of Seasonal Epidemic Onset in R","text":"predict method aedseo objects allows make predictions future time steps based estimated growth rates. ’s use : example , use predict method predict growth rates next 5 time steps. n_step argument specifies number steps future want forecast. resulting prediction object contain estimates, lower bounds, upper bounds time step.","code":"# Example: Predict growth rates for the next 5 time steps (prediction <- predict(aedseo_results, n_step = 5)) #> # A tibble: 6 × 5 #>       t time       estimate lower upper #>   <int> <date>        <dbl> <dbl> <dbl> #> 1     0 2012-12-21    3279. 3279. 3279. #> 2     1 2012-12-22    3736. 3590. 3889. #> 3     2 2012-12-23    4257. 3930. 4613. #> 4     3 2012-12-24    4851. 4303. 5471. #> 5     4 2012-12-25    5527. 4710. 6490. #> 6     5 2012-12-26    6298. 5157. 7697."},{"path":"https://telkamp7.github.io/aedseo/articles/aedseo_introduction.html","id":"summarizing-aedseo-results","dir":"Articles","previous_headings":"The aedseo package implements S3 methods","what":"Summarizing AEDSEO results","title":"Automated Detection of Seasonal Epidemic Onset in R","text":"summary method aedseo objects provides concise summary automated early detection seasonal epidemic onset (AEDSEO) analysis. can use retrieve important information analysis, including latest growth warning total number growth warnings: summary method generates summary message includes details reference time point, growth rate estimates, number growth warnings series. helps quickly assess key findings analysis.","code":"summary(aedseo_results) #> Summary of aedseo Object #>  #>     Called using distributional family: #>       quasipoisson #>  #>     Window size for growth rate estimation and #>     calculation of sum of cases: #>       5 #>  #>     Disease specific threshold: #>       2000 #>  #>     Reference time point: #>       2012-12-21 #>  #>     Sum of cases at reference time point: #>       12468 #>     Latest sum of cases warning: #>       2012-12-21 #>  #>     Growth rate estimate at reference time point: #>       Estimate   Lower (2.5%)   Upper (97.5%) #>          0.131     0.091          0.171 #>  #>     Total number of growth warnings in the series: #>       59 #>     Latest growth warning: #>       2012-12-21 #>  #>     Latest seasonal onset alarm: #>       2012-12-21"},{"path":"https://telkamp7.github.io/aedseo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kasper Schou Telkamp. Author, maintainer.","code":""},{"path":"https://telkamp7.github.io/aedseo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schou Telkamp K (2023). aedseo: Automated Early Detection Seasonal Epidemic Onset. R package version 0.0.0.9000, https://telkamp7.github.io/aedseo/, https://github.com/telkamp7/aedseo.","code":"@Manual{,   title = {aedseo: Automated and Early Detection of Seasonal Epidemic Onset},   author = {Kasper {Schou Telkamp}},   year = {2023},   note = {R package version 0.0.0.9000, https://telkamp7.github.io/aedseo/},   url = {https://github.com/telkamp7/aedseo}, }"},{"path":[]},{"path":"https://telkamp7.github.io/aedseo/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"Automated Early Detection Seasonal Epidemic Onset (aedseo) Package provides powerful tool automating early detection seasonal epidemic onsets time series data. offers ability estimate growth rates consecutive time intervals calculate Sum Cases (SoC) within intervals. package particularly useful epidemiologists, public health professionals, researchers seeking identify respond seasonal epidemics timely fashion.","code":""},{"path":"https://telkamp7.github.io/aedseo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"can install development version aedseo GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"telkamp7/aedseo\")"},{"path":"https://telkamp7.github.io/aedseo/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"quickly get started aedseo, follow steps: Install package using code provided . Load package library(aedseo). Create time series data object (tsibble) data using aedseo::tsd function. Apply aedseo::aedseo function estimate growth rates detect seasonal epidemic onsets.","code":"# Load the package library(aedseo)  # Create a tsibble object from your data tsd_data <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\")     ),     time_interval = \"day\"   )  # Detect seasonal epidemic onsets aedseo_results <- aedseo(tsd = tsd_data, k = 3, level = 0.95, family = \"poisson\")"},{"path":"https://telkamp7.github.io/aedseo/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"detailed introduction workflow package, see introductory vignette.","code":"# After installing the package vignette(\"aedseo_introduction\", package = \"aedseo\")"},{"path":"https://telkamp7.github.io/aedseo/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Automated and Early Detection of Seasonal Epidemic Onset","text":"welcome contributions aedseo package. Feel free open issues, submit pull requests, provide feedback help us improve.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/aedseo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aedseo: Automated and Early Detection of Seasonal Epidemic Onset — aedseo-package","title":"aedseo: Automated and Early Detection of Seasonal Epidemic Onset — aedseo-package","text":"Automated Early Detection Seasonal Epidemic Onset (aedseo) Package provides powerful tool automating early detection seasonal epidemic onsets time series data. offers ability estimate growth rates consecutive time intervals calculate Sum Cases (SoC) within intervals. package particularly useful epidemiologists, public health professionals, researchers seeking identify respond seasonal epidemics timely fashion.","code":""},{"path":[]},{"path":"https://telkamp7.github.io/aedseo/reference/aedseo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aedseo: Automated and Early Detection of Seasonal Epidemic Onset — aedseo-package","text":"Maintainer: Kasper Schou Telkamp ksst@ssi.dk (ORCID)","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/aedseo.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated and Early Detection of Seasonal Epidemic Onset — aedseo","title":"Automated and Early Detection of Seasonal Epidemic Onset — aedseo","text":"function performs automated early detection seasonal epidemic onsets (aedseo) time series dataset. estimates growth rates consecutive time intervals calculates Sum Cases (sum_of_cases).","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/aedseo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated and Early Detection of Seasonal Epidemic Onset — aedseo","text":"","code":"aedseo(   tsd,   k = 5,   level = 0.95,   disease_threshold = NA_integer_,   family = c(\"poisson\", \"quasipoisson\") )"},{"path":"https://telkamp7.github.io/aedseo/reference/aedseo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated and Early Detection of Seasonal Epidemic Onset — aedseo","text":"tsd aedseo_tsd object containing time series data 'time,' 'observed,' 'periodInYear.' k integer specifying window size modeling growth rates. level confidence level parameter estimates, numeric value 0 1. disease_threshold integer specifying threshold considering disease outbreak. family character string specifying family modeling. Choose \"poisson,\" \"quasipoisson\".","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/aedseo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated and Early Detection of Seasonal Epidemic Onset — aedseo","text":"tibble containing: 'reference_time': time point growth rate estimated. 'observed': observed value reference time point. 'growth_rate': estimated growth rate. 'lower_growth_rate': lower bound growth rate's confidence interval. 'upper_growth_rate': upper bound growth rate's confidence interval. 'growth_warning': Logical. growth rate significantly higher zero? 'sum_of_cases': Sum Cases within time window. 'sum_of_cases_warning': Logical. Sum Cases exceed disease threshold? 'seasonal_onset_alarm': Logical. seasonal onset alarm? 'converged': Logical. IWLS judged converged?","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/aedseo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated and Early Detection of Seasonal Epidemic Onset — aedseo","text":"","code":"# Create a tsibble object from sample data tsd_data <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  # Calculate AEDSEO with a 3-day window and a Poisson family model aedseo_results <- aedseo(   tsd = tsd_data,   k = 3,   level = 0.95,   disease_threshold = 200,   family = \"poisson\" )  # Print the AEDSEO results print(aedseo_results) #> # A tibble: 4 × 10 #>   reference_time observed growth_rate lower_growth_rate upper_growth_rate #>   <date>            <dbl>       <dbl>             <dbl>             <dbl> #> 1 2023-01-03          150       0.204            0.0785             0.331 #> 2 2023-01-04          180       0.201            0.0874             0.316 #> 3 2023-01-05          220       0.192            0.0891             0.296 #> 4 2023-01-06          270       0.203            0.109              0.297 #> # ℹ 5 more variables: growth_warning <lgl>, sum_of_cases <dbl>, #> #   sum_of_cases_warning <lgl>, seasonal_onset_alarm <lgl>, converged <lgl>"},{"path":"https://telkamp7.github.io/aedseo/reference/autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete ggplot appropriate to a particular data type — autoplot.aedseo_tsd","title":"Create a complete ggplot appropriate to a particular data type — autoplot.aedseo_tsd","text":"function generates complete ggplot object suitable visualizing time series data aedseo_tsd object. creates line plot connecting observations adds points data point.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete ggplot appropriate to a particular data type — autoplot.aedseo_tsd","text":"","code":"# S3 method for aedseo_tsd autoplot(object, ...)  # S3 method for aedseo autoplot(object, linewidth = 0.7, alpha = 0.3, ...)"},{"path":"https://telkamp7.github.io/aedseo/reference/autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete ggplot appropriate to a particular data type — autoplot.aedseo_tsd","text":"object aedseo_tsd aedseo object ... Additional arguments (used). linewidth Numeric, width line growth rate alpha Numeric, alpha (transparency) confidence interval ribbon","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete ggplot appropriate to a particular data type — autoplot.aedseo_tsd","text":"ggplot object visualizing time series data.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete ggplot appropriate to a particular data type — autoplot.aedseo_tsd","text":"","code":"# Create an example aedseo_tsd object aedseo_tsd_object <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  # Create a ggplot visualization for the aedseo_tsd object # autoplot(aedseo_tsd_object)  # Create an aedseo object aedseo_object <- aedseo(   tsd = aedseo_tsd_object,   k = 3,   level = 0.95,   family = \"quasipoisson\" )  # Create a ggplot visualization of growth rates with confidence intervals # autoplot(aedseo_object, linewidth = 1, alpha = 0.2)"},{"path":"https://telkamp7.github.io/aedseo/reference/fit_growth_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a growth rate model to time series observations. — fit_growth_rate","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"function fits growth rate model time series observations provides parameter estimates along confidence intervals.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/fit_growth_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"","code":"fit_growth_rate(   observations,   level = 0.95,   family = c(\"poisson\", \"quasipoisson\") )"},{"path":"https://telkamp7.github.io/aedseo/reference/fit_growth_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"observations numeric vector containing time series observations. level confidence level parameter estimates, numeric value 0 1. family character string specifying family modeling. Choose \"poisson,\" \"quasipoisson\".","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/fit_growth_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"list containing: 'fit': fitted growth rate model. 'estimate': numeric vector parameter estimates, including growth rate confidence interval. 'level': confidence level used estimating parameter confidence intervals.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/fit_growth_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"","code":"# Fit a growth rate model to a time series of counts # (e.g., population growth) data <- c(100, 120, 150, 180, 220, 270) growth_rate_model <- fit_growth_rate(   observations = data,   level = 0.95,   family = \"poisson\" )  # Print the estimated growth rate and confidence interval print(growth_rate_model$estimate) #> growth_rate       2.5 %      97.5 %  #>   0.1992211   0.1624836   0.2362807"},{"path":"https://telkamp7.github.io/aedseo/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://telkamp7.github.io/aedseo/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete ggplot appropriate to a particular data type — plot.aedseo_tsd","title":"Create a complete ggplot appropriate to a particular data type — plot.aedseo_tsd","text":"function generates complete ggplot object suitable visualizing time series data aedseo_tsd object. creates line plot connecting observations adds points data point.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete ggplot appropriate to a particular data type — plot.aedseo_tsd","text":"","code":"# S3 method for aedseo_tsd plot(x, ...)  # S3 method for aedseo plot(x, ...)"},{"path":"https://telkamp7.github.io/aedseo/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete ggplot appropriate to a particular data type — plot.aedseo_tsd","text":"x aedseo_tsd aedseo object ... Additional arguments passed specific methods.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete ggplot appropriate to a particular data type — plot.aedseo_tsd","text":"ggplot object visualizing time series data.","code":""},{"path":[]},{"path":"https://telkamp7.github.io/aedseo/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete ggplot appropriate to a particular data type — plot.aedseo_tsd","text":"","code":"# Create an example aedseo_tsd object aedseo_tsd_object <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  # Create a ggplot visualization for the aedseo_tsd object plot(aedseo_tsd_object)   # Create an aedseo object aedseo_object <- aedseo(   tsd = aedseo_tsd_object,   k = 3,   level = 0.95,   family = \"quasipoisson\" )  # Create a ggplot visualization of growth rates with confidence intervals plot(aedseo_object, linewidth = 1, alpha = 0.2)"},{"path":"https://telkamp7.github.io/aedseo/reference/predict.aedseo.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Growth Rates for Future Time Steps — predict.aedseo","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"function used predict future growth rates based model object created using AEDSEO package. takes model object number future time steps (n_step) want make predictions returns prediction tibble.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/predict.aedseo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"","code":"# S3 method for aedseo predict(object, n_step = 3, ...)"},{"path":"https://telkamp7.github.io/aedseo/reference/predict.aedseo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"object model object created using aedseo package, typically result aedseo() function. n_step integer specifying number future time steps want predict growth rates. Default 3. ... Additional arguments (used).","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/predict.aedseo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"tibble S3 object called aedseo containing predicted growth rates, including time, estimated growth rate, lower confidence interval, upper confidence interval specified number future time steps.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/predict.aedseo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"","code":"# Analyze the data using the aedseo package tsd_data <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  aedseo_results <- aedseo(   tsd = tsd_data,   k = 3,   level = 0.95,   family = \"poisson\" )  # Predict growth rates for the next 5 time steps prediction <- predict(object = aedseo_results, n_step = 5)  # Print the prediction print(prediction) #> # A tibble: 6 × 5 #>       t time       estimate lower upper #>   <int> <date>        <dbl> <dbl> <dbl> #> 1     0 2023-01-06     270   270   270  #> 2     1 2023-01-07     331.  301.  363. #> 3     2 2023-01-08     405.  336.  489. #> 4     3 2023-01-09     496.  375.  658. #> 5     4 2023-01-10     608.  418.  885. #> 6     5 2023-01-11     745.  467. 1191."},{"path":"https://telkamp7.github.io/aedseo/reference/summary.aedseo.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for aedseo objects — summary.aedseo","title":"Summary method for aedseo objects — summary.aedseo","text":"Summarize results aedseo analysis, including latest growth rate estimate, confidence interval, information growth warnings.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/summary.aedseo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for aedseo objects — summary.aedseo","text":"","code":"# S3 method for aedseo summary(object, ...)"},{"path":"https://telkamp7.github.io/aedseo/reference/summary.aedseo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for aedseo objects — summary.aedseo","text":"object object class 'aedseo' containing results aedseo analysis. ... Additional arguments (used).","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/summary.aedseo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for aedseo objects — summary.aedseo","text":"function used side effect, printing summary message console.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/summary.aedseo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for aedseo objects — summary.aedseo","text":"","code":"# Create a tsibble object from sample data tsd_data <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  # Calculate AEDSEO with a 3-day window and a Poisson family model aedseo_results <- aedseo(   tsd = tsd_data,   k = 3,   level = 0.95,   family = \"poisson\" ) # Print the summary of the aedseo_results to the console summary(aedseo_results) #> Summary of aedseo Object #>  #>     Called using distributional family: #>       poisson #>  #>     Window size for growth rate estimation and #>     calculation of sum of cases: #>       3 #>  #>     Disease specific threshold: #>       NA #>  #>     Reference time point: #>       2023-01-06 #>  #>     Sum of cases at reference time point: #>       670 #>     Latest sum of cases warning: #>       NA #>  #>     Growth rate estimate at reference time point: #>       Estimate   Lower (2.5%)   Upper (97.5%) #>          0.203     0.109          0.297 #>  #>     Total number of growth warnings in the series: #>       4 #>     Latest growth warning: #>       2023-01-06 #>  #>     Latest seasonal onset alarm: #>       NA"},{"path":"https://telkamp7.github.io/aedseo/reference/tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a S3 aedseo_tsd (time-series data) object from observed data\nand corresponding dates. — tsd","title":"Create a S3 aedseo_tsd (time-series data) object from observed data\nand corresponding dates. — tsd","text":"function takes observed data corresponding date vector converts aedseo_tsd object, time series data structure can used time series analysis.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a S3 aedseo_tsd (time-series data) object from observed data\nand corresponding dates. — tsd","text":"","code":"tsd(observed, time, time_interval = c(\"day\", \"week\", \"month\"))"},{"path":"https://telkamp7.github.io/aedseo/reference/tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a S3 aedseo_tsd (time-series data) object from observed data\nand corresponding dates. — tsd","text":"observed numeric vector containing observations. time date vector containing corresponding dates. time_interval character vector specifying time interval. Choose \"day,\" \"week,\" \"month.\"","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/tsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a S3 aedseo_tsd (time-series data) object from observed data\nand corresponding dates. — tsd","text":"aedseo_tsd object containing time, observations, periodInYear.","code":""},{"path":"https://telkamp7.github.io/aedseo/reference/tsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a S3 aedseo_tsd (time-series data) object from observed data\nand corresponding dates. — tsd","text":"","code":"# Create a `aedseo_tsd` object from daily data daily_tsd <- tsd(   observed = c(10, 15, 20, 18),   time = as.Date(     c(\"2023-01-01\", \"2023-01-02\", \"2023-01-03\", \"2023-01-04\")   ),   time_interval = \"day\" )  # Create a `aedseo_tsd` object from weekly data weekly_tsd <- tsd(   observed = c(100, 120, 130),   time = as.Date(     c(\"2023-01-01\", \"2023-01-08\", \"2023-01-15\")   ),   time_interval = \"week\" )  # Create a `aedseo_tsd` object from monthly data monthly_tsd <- tsd(   observed = c(500, 520, 540),   time = as.Date(     c(\"2023-01-01\", \"2023-02-01\", \"2023-03-01\")   ),   time_interval = \"month\" )"}]
