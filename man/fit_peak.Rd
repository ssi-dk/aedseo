% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_peak.R
\name{fit_peak}
\alias{fit_peak}
\title{Fit a peak algorithm to time series observations in a set of seasons.}
\usage{
fit_peak(
  weighted_observations,
  conf_levels = c(0.5, 0.9, 0.95),
  family = c("weibull", "lnorm", "exp"),
  optim_method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN", "Brent"),
  lower_optim = -Inf,
  upper_optim = Inf
)
}
\arguments{
\item{weighted_observations}{A tibble containing three columns of size n;
\code{observation}, which represents the data points, and \code{weight}, which is the
importance assigned to an observation. Higher weights indicate that an
observation has more influence on the model outcome, while lower weights
reduce its impact. The structure is:
\code{weighted_observations = tibble(observation = c(...), weight = c(...))}}

\item{conf_levels}{The confidence levels for parameter estimates, a numeric
vector of length 3. Default is c(0.50, 0.90, 0.95).}

\item{family}{A character string specifying the family for
modeling. Choose between "weibull", "lnorm" or "exp".}

\item{optim_method}{A character string specifying the method to be used in
the optimisation. Lookup ?optim::stats for details about methods.
Default is Nelder-Mead. If using the exp family it is recomended to use
Brent as it is a one-dimensional optimisation.}

\item{lower_optim}{A numeric value for the optimisation. Default is -Inf.}

\item{upper_optim}{A numeric value for the optimisation. Default is Inf.}
}
\value{
A tibble containing:
\itemize{
\item 'high_level': The highest peak intensity level
\item 'medium_level': The medium peak intensity level
\item 'low_level': The lowest intensity level
\item 'optim_fit_par_1': The first fit parameter for the chosen family.
\itemize{
\item For 'weibull': Shape parameter (k).
\item For 'lnorm': Mean of the log-transformed observations.
\item For 'exp': Rate parameter (λ).
}
\item 'optim_fit_par_2': The second fit parameter for the chosen family.
\itemize{
\item For 'weibull': Scale parameter (λ).
\item For 'lnorm': Standard deviation of the log-transformed observations.
\item For 'exp': Not applicable (set to NA).
}
\item 'obj_value': The value of the objective function
(negative log-likelihood), which represent the minimized objective
function value from the optimisation. Smaller value equals better
optimisation.
\item 'converged': Logical. TRUE if the optimisation converged.
\item 'family': The distribution family used for the optimization.
\itemize{
\item 'weibull': Uses the Weibull distribution for fitting.
\item 'lnorm': Uses the Log-normal distribution for fitting.
\item 'exp': Uses the Exponential distribution for fitting.
}
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

This function calculates the intensity levels of peak time series
observations to the next comming season based on previouse seasons.
Peak observations are the n highest observations from each season.
It provides low, medium, high intensity levels, that reflect the
current intensity of infection based on previous seasons. Hence it
uses the peak observations from each previous season it can only
explain the current intensity in relation to the peak of the season.
}
\examples{
# Create three seasons with random observations
obs = 10
season = c("2018/2019", "2019/2020", "2020/2021")
season_num_rev <- rev(seq(from = 1, to = length(season)))
observations = rep(rnorm(10,obs), length(season))

# Add into a tibble with weight decreasing going one season step back
peak_input <- tibble(
  observation = observations,
  weight = 0.8^rep(season_num_rev, each = obs),
  season = season[rep(seq(from = 1, to = length(season)), each = obs)]
)

# Use the peak model
fit_peak(weighted_observations = peak_input,
         conf_levels = c(0.50, 0.90, 0.95),
         family = "weibull")
}
