% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_weighted_intensity_levels.R
\name{compute_weighted_intensity_levels}
\alias{compute_weighted_intensity_levels}
\title{Compute intensity levels with weighted time series observations (quantile model).}
\usage{
compute_weighted_intensity_levels(
  weighted_observations,
  conf_levels = c(0.5, 0.9, 0.95),
  family = c("weibull", "lnorm", "exp"),
  optim_method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN", "Brent"),
  lower_optim = -Inf,
  upper_optim = Inf
)
}
\arguments{
\item{weighted_observations}{A tibble containing two columns of length n; \code{observed}, which contains the data
points, and \code{weight}, which is the importance assigned to the observation. Higher weights indicate that an
observation has more influence on the model outcome, while lower weights reduce its impact.}

\item{conf_levels}{The confidence levels for parameter estimates, a numeric vector of length 3. The three values
have to be unique and in ascending order, such as the low level is first and high level is last.}

\item{family}{A character string specifying the family for modeling. Choose between "weibull", "lnorm" or "exp".}

\item{optim_method}{A character string specifying the method to be used in the optimisation. Lookup \code{?optim::stats}
for details about methods.
If using the exp family it is recommended to use Brent as it is a one-dimensional optimisation.}

\item{lower_optim}{A numeric value for the optimisation.}

\item{upper_optim}{A numeric value for the optimisation.}
}
\value{
A tibble containing:
\itemize{
\item 'low_level': The low intensity level
\item 'medium_level': The medium intensity level
\item 'high_level': The high intensity level
\item 'optim_fit_par_1': The first fit parameter for the chosen family.
\itemize{
\item For 'weibull': Shape parameter (k).
\item For 'lnorm': Mean of the log-transformed observations.
\item For 'exp': Rate parameter (λ).
}
\item 'optim_fit_par_2': The second fit parameter for the chosen family.
\itemize{
\item For 'weibull': Scale parameter (λ).
\item For 'lnorm': Standard deviation of the log-transformed observations.
\item For 'exp': Not applicable (set to NA).
}
\item 'obj_value': The value of the objective function
(negative log-likelihood), which represent the minimized objective
function value from the optimisation. Smaller value equals better
optimisation.
\item 'converged': Logical. TRUE if the optimisation converged.
\item 'family': The distribution family used for the optimization.
\itemize{
\item 'weibull': Uses the Weibull distribution for fitting.
\item 'lnorm': Uses the Log-normal distribution for fitting.
\item 'exp': Uses the Exponential distribution for fitting.
}
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

This function calculates the intensity levels of weighted time series observations. The output contain low, medium,
high intensity levels, that predict the intensity levels of the next series of observations.
}
\examples{
# Create three seasons with random observations
obs <- 10
season <- c("2018/2019", "2019/2020", "2020/2021")
season_num_rev <- rev(seq(from = 1, to = length(season)))
observations <- rep(stats::rnorm(10, obs), length(season))

# Add into a tibble with decreasing weight for older seasons
data_input <- tibble::tibble(
  observed = observations,
  weight = 0.8^rep(season_num_rev, each = obs)
)

# Use the model
compute_weighted_intensity_levels(weighted_observations = data_input,
                                  conf_levels = c(0.50, 0.90, 0.95),
                                  family = "weibull")
}
