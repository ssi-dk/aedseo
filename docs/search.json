[{"path":"https://ssi-dk.github.io/aedseo/articles/aedseo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Automated Detection of Seasonal Epidemic Onset and Burden Levels in R","text":"aedseo package performs automated early detection seasonal epidemic onsets estimates breakpoints burden levels time series data stratified season. seasonal onset (seasonal_onset()) estimates growth rates consecutive time intervals calculates sum cases. burden levels (seasonal_burden_levels()) use previous seasons estimate burden levels current season. algorithm allows surveillance pathogens, alarming observations significant growth selected time interval based disease-specific threshold, also evaluating burden current observations based previous seasons.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/aedseo.html","id":"seasonal-data","dir":"Articles","previous_headings":"Introduction","what":"Seasonal data","title":"Automated Detection of Seasonal Epidemic Onset and Burden Levels in R","text":"apply aedseo algorithm, data needs transformed tsd object. data, to_time_series() function can used arguments: observation, time, time_interval. following section, application algorithm shown simulated data created generate_seasonal_data()function. information function can found vignette(\"generate_seasonal_wave\") following figure simulated data (solid circles) visualised individual observations. solid line connects points, representing underlying mean trend three years weekly data.","code":"plot(tsd_data)"},{"path":"https://ssi-dk.github.io/aedseo/articles/aedseo.html","id":"determining-season","dir":"Articles","previous_headings":"Introduction","what":"Determining season","title":"Automated Detection of Seasonal Epidemic Onset and Burden Levels in R","text":"Respiratory viruses can circulate different seasons based location. nordic hemisphere mostly circulate fall winter seasons, hence surveillance intensified week 40 week 20 following year. include data, season example set week 21 week 20 following year. example burden levels seasonal onset estimated season 2024/2025.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/aedseo.html","id":"determining-the-disease-specific-threshold","dir":"Articles","previous_headings":"Introduction","what":"Determining the disease specific threshold","title":"Automated Detection of Seasonal Epidemic Onset and Burden Levels in R","text":"observations low risk randomness result significant growth estimates isolated periods. increase robustness method disease-specific threshold introduced. set subsequent estimates growth likely significant well. disease-specific threshold can determined examining continuous periods sustained significant growth, determine number observations events occur. example disease-specific threshold determined based consecutive significant observations available previous seasons. Significant observations defined significant positive growth rate. capture short-term changes fluctuations data, rolling window size \\(k = 5\\) used create subsets data model fitting, quasipoisson family used account overdispersion. disease-specific threshold estimated four available previous seasons. seasonal_onset() function can used purpose, without providing disease-specific threshold. consecutive_growth_warnings() function can used create groups subsequent significant observations. data can analysed, else can use plot/autoplot visualise sequences significant observations season. sum_of_cases variable divided five represent average five-week window, defining disease-specific threshold time-step.  plot , observe length periods subsequent significant growth rates (y-axis). season longest consecutive period growth 2021/2022, lasting 14 weeks. However, since determining threshold specifically 2024/2025 season, ’s important prioritize recent seasons. 2023/2024 season shows two periods significant growth, first longest coinciding closely timing consecutive growth period observed 2022/2023. select disease-specific threshold 25 ensure early detection seasonal onset minimizing false positives. words, season onset declared average observation count five weeks surpasses 25 accompanied significantly positive growth rate. Inspect exact conditions around detected season start inspecting output code, disease-specific threshold established 25 observations.","code":"tsd_onset <- seasonal_onset(   tsd = tsd_data,   k = 5,   family = \"quasipoisson\",   na_fraction_allowed = 0.4,   season_start = 21, # Season starts in week 21   season_end = 20, # Season ends in week 20 the following year   only_current_season = FALSE )  consecutive_gr_warn <- consecutive_growth_warnings(   onset_output = tsd_onset )  autoplot(   consecutive_gr_warn,   k = 5,   skip_current_season = TRUE ) +   ggplot2::geom_vline(     ggplot2::aes(xintercept = 25, linetype = \"Threshold\"),     color = \"black\", linewidth = 0.6   ) +   ggplot2::scale_linetype_manual(     name   = \"\",     values = c(\"Threshold\" = \"dashed\")   ) consecutive_gr_warn |>   dplyr::filter(!is.na(significant_counter)) |>   dplyr::filter(season != max(consecutive_gr_warn$season)) |>   dplyr::group_by(season) |>   dplyr::filter(significant_counter == max(significant_counter)) |>   dplyr::mutate(disease_threshold = sum_of_cases / 5,                 week = ISOweek::ISOweek(reference_time)) |>   dplyr::select(season, week, disease_threshold) #> # A tibble: 5 × 3 #> # Groups:   season [4] #>   season    week     disease_threshold #>   <chr>     <chr>                <dbl> #> 1 2020/2021 2020-W46              69.8 #> 2 2021/2022 2021-W41              22.6 #> 3 2022/2023 2022-W42              28.2 #> 4 2023/2024 2023-W41              19.6 #> 5 2023/2024 2023-W48             128."},{"path":"https://ssi-dk.github.io/aedseo/articles/aedseo.html","id":"applying-the-main-algorithm","dir":"Articles","previous_headings":"","what":"Applying the main algorithm","title":"Automated Detection of Seasonal Epidemic Onset and Burden Levels in R","text":"primary function aedseo package combined_seasonal_output() integrates seasonal_onset() seasonal_burden_levels() functions deliver comprehensive seasonal analysis. Detailed information function respective arguments can found vignette(\"seasonal_onset\") vignette(\"burden_levels\"). default function estimates onset burden levels current season. desired see calculations previous seasons, only_current_season argument set FALSE. Note: Burden levels can estimated first season needs least two seasons data estimations based data previous seasons.\\ aedseo package implements S3 methods including plot(), predict() summary() functions specifically designed objects aedseo package. predict() relevant tsd_onset objects. example using summary() S3 method tsd_onset tsd_burden_level objects shown . Seasonal onset output can extracted : Seasonal burden output can extracted :","code":"seasonal_output <- combined_seasonal_output(   tsd = tsd_data,   disease_threshold = 25,   method = \"intensity_levels\",   family = \"quasipoisson\" ) summary(seasonal_output$onset_output) #> Summary of tsd_onset object with disease_threshold #>  #>       Model output: #>         Reference time point (first seasonal onset alarm in season): 2024-11-03 #>         Observations at reference time point: 131 #>         Sum of observations at reference time point: 329 #>         Growth rate estimate at reference time point: #>           Estimate   Lower (2.5%)   Upper (97.5%) #>             0.312     0.517          0.117 #>         Total number of growth warnings in the series: 11 #>         Latest growth warning: 2024-12-22 #>         Latest sum of cases warning: 2025-01-26 #>         Latest seasonal onset alarm: 2024-12-22 #>  #>       The season for reference time point: #>         2024/2025 #>  #>       Model settings: #>         Called using distributional family: quasipoisson #>         Window size for growth rate estimation and calculation of sum of cases: 5 #>         The time interval for the observations: week #>         Disease specific threshold: 25 summary(seasonal_output$burden_output) #> Summary of tsd_burden_levels object #>  #>     Breakpoint estimates: #>       very low : 25.000000 #>       low: 61.188227 #>       medium: 149.759965 #>       high: 366.541871 #>  #>     The season for the burden levels: #>       2024/2025 #>  #>     Model settings: #>       Disease specific threshold: 25 #>       Called using distributional family: lnorm"},{"path":"https://ssi-dk.github.io/aedseo/articles/aedseo.html","id":"plot-the-comprehensive-seasonal-analysis","dir":"Articles","previous_headings":"Applying the main algorithm","what":"Plot the comprehensive seasonal analysis","title":"Automated Detection of Seasonal Epidemic Onset and Burden Levels in R","text":"plot() S3 method tsd_combined_seasonal_output objects allows get complete visualisation combined_seasonal_output() analysis current season.  Using intensity_levels method define burden levels, seasonal onset likely fall within low medium category. low breakpoint disease-specific threshold, season onset identified five-week average observations exceed threshold along significant positive growth rate.","code":"# Adjust y_lower_bound dynamically to remove noisy small values disease_threshold <- 25 y_lower_bound <- ifelse(disease_threshold < 10, 1, 5)  plot(   x = seasonal_output,   y_lower_bound = y_lower_bound,   time_interval = \"3 weeks\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/aedseo.html","id":"investigate-historical-estimates","dir":"Articles","previous_headings":"Applying the main algorithm","what":"Investigate historical estimates","title":"Automated Detection of Seasonal Epidemic Onset and Burden Levels in R","text":"historical_summary() function tsd_onset objects provides historical estimates previous seasons. utilising function, easy assess whether current estimates align previously observed patterns specific pathogen, significant changes occurred. changes might result altered testing practices, pathogen mutations, factors. analysis indicates notable deviations past patterns, advisable revisit method used define disease-specific threshold, might need adjustment.","code":"# Get `tsd_onset` object tsd_onset <- seasonal_onset(   tsd = tsd_data,   disease_threshold = 25,   family = \"quasipoisson\",   season_start = 21,   season_end = 20,   only_current_season = FALSE )  historical_summary(tsd_onset) #> # A tibble: 5 × 10 #>   season    onset_time peak_time  peak_intensity lower_growth_rate_onset #>   <chr>     <date>     <date>              <dbl>                   <dbl> #> 1 2020/2021 2020-11-15 2021-01-10            275                 0.00681 #> 2 2021/2022 2021-10-24 2022-01-09            292                 0.155   #> 3 2022/2023 2022-10-23 2022-12-25            287                 0.412   #> 4 2023/2024 2023-10-22 2024-01-07            377                 0.501   #> 5 2024/2025 2024-11-03 2025-01-12            331                 0.117   #> # ℹ 5 more variables: growth_rate_onset <dbl>, upper_growth_rate_onset <dbl>, #> #   onset_week <dbl>, peak_week <dbl>, weeks_to_peak <dbl>"},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"methodology","dir":"Articles","previous_headings":"","what":"Methodology","title":"Seasonal Burden Levels","text":"methodology used define burden levels seasonal epidemics based observations previous seasons. Historical data available seasons used establish levels current season. done : Using n highest (peak) observations season. Selecting observations surpass disease-specific threshold. Weighting observations recent observations greater influence older observations. proper distribution (log-normal, weibull exponential currently implemented) fitted weighted n peak observations. selected distribution fitted parameters used calculate percentiles used breakpoints. peak_levels models height seasonal peaks. Using log-normal distribution without weights similar default mem. intensity_levels models within season levels. highest breakpoint identical peak_levels method. Intermediate breakpoints evenly distributed logaritmic scale, low high breakpoints, give relative difference breakpoints. model implemented seasonal_burden_levels() function aedseo package. following sections describe arguments function model build.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"peak-observations","dir":"Articles","previous_headings":"Methodology","what":"Peak observations","title":"Seasonal Burden Levels","text":"n_peak argument defines number highest observations included season. default n_peak 6 - corresponding mem defaults using 30 observations across latest five seasons.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"weighting","dir":"Articles","previous_headings":"Methodology","what":"Weighting","title":"Seasonal Burden Levels","text":"decay_factor argument implemented give weight recent seasons, often indicative current future trends. time progresses, relevance older seasons may decrease due changes factors like testing recommendations, population immunity, virus mutations, intervention strategies. Weighting older seasons less reflects reduced relevance. time-series analysis, \\(\\frac{1}{1-\\text{decay_factor}}\\) often used approximate “effective memory”. Hence, default decay_factor = 0.8 effective memory five seasons. (See mentioned Hyndman & Athanasopoulos introduction simple exponential smoothing) default decay_factor allows model responsive recent changes without overly sensitive short-term fluctuations. optimal decay_factor can vary depending variability trends within data. datasets seasonal patterns highly stable, higher decay_factor (.e. longer memory) may appropriate. Conversely, data exhibit dramatic shifts one season next, lower decay_factor may improve predictions.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"distribution-and-optimisation","dir":"Articles","previous_headings":"Methodology","what":"Distribution and optimisation","title":"Seasonal Burden Levels","text":"family argument used select distribution n_peak observations fitted , users can choose lnorm, weibull exp distributions. log-normal distribution theoretically aligns well nature epidemic data, often exhibits multiplicative growth patterns. optimisation process, evaluated distributions determine performance fitting Danish non-sentinel cases hospitalisation data RSV, SARS-CoV-2 Influenza (B). three distributions comparable weighted likelihood values optimisation, hence see statistical significant difference performance. model uses fit_percentiles() function employs stats::optim estimating parameters maximizes weighted likelihood. optim_method argument can passed seasonal_burden_levels(), default Nelder-Mead methods can selected, see ?fit_percentiles.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"burden-levels","dir":"Articles","previous_headings":"Methodology","what":"Burden levels","title":"Seasonal Burden Levels","text":"method argument used select one two methods intensity_levels(default) peak_levels. methods return percentile(s) fitted distribution used define breakpoins burden levels. Breakpoints named low, low, medium high define upper bound corresponding burden level. intensity_levels takes one percentile argument, representing highest breakpoint. default set 95% percentile. disease-specific threshold determines low breakpoint. low medium breakpoints calculated give identical relative increases low high breakpoints. peak_levels takes three percentiles argument, representing low, medium high breakpoints. default percentiles 40%, 90%, 97.5% align parameters used mem. disease-specific threshold defines low breakpoint.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"applying-the-seasonal_burden_levels-algorithm","dir":"Articles","previous_headings":"","what":"Applying the seasonal_burden_levels() algorithm","title":"Seasonal Burden Levels","text":"data created following combinations: noise noise positive trend noise negative trend combinations selected realistic real world data noise, differentiation trend can occur declining inclining seasons. Breakpoints season 2024/2025 calculated based three previous seasons. apply seasonal_burden_levels() algorithm, data needs transformed tsd object. disease-specific threshold determined data combinations use method described vignette(\"aedseo\"). disease-specific threshold revised new season starts, especially data trend.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"use-the-intensity_levels-method","dir":"Articles","previous_headings":"Applying the seasonal_burden_levels() algorithm","what":"Use the intensity_levels method","title":"Seasonal Burden Levels","text":"seasonal_burden_levels() function provides tsd_burden_level object, can used summary() S3 method. provides concise summary comprehensive seasonal burden level analysis, including breakpoints current season.","code":"intensity_levels_n <- seasonal_burden_levels(   tsd = tsd_data_noise,   disease_threshold = 10,   method = \"intensity_levels\",   conf_levels = 0.975 ) summary(intensity_levels_n) #> Summary of tsd_burden_levels object #>  #>     Breakpoint estimates: #>       very low : 10.000000 #>       low: 53.267535 #>       medium: 283.743033 #>       high: 1511.429206 #>  #>     The season for the burden levels: #>       2025/2026 #>  #>     Model settings: #>       Disease specific threshold: 10 #>       Called using distributional family: lnorm"},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"use-the-peak_levels-method","dir":"Articles","previous_headings":"Applying the seasonal_burden_levels() algorithm","what":"Use the peak_levels method","title":"Seasonal Burden Levels","text":"mem uses n highest observations previous epidemic period fit parameters distribution, n = 30/seasons. data four previous seasons, align mem, use n_peak = 8","code":"peak_levels_n <- seasonal_burden_levels(   tsd = tsd_data_noise,   disease_threshold = 10,   method = \"peak_levels\",   conf_levels = c(0.4, 0.9, 0.975),   n_peak = 8 ) summary(peak_levels_n) #> Summary of tsd_burden_levels object #>  #>     Breakpoint estimates: #>       very low : 10.000000 #>       low: 1133.397742 #>       medium: 1366.530366 #>       high: 1484.312479 #>  #>     The season for the burden levels: #>       2025/2026 #>  #>     Model settings: #>       Disease specific threshold: 10 #>       Called using distributional family: lnorm"},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"compare-intensity_levels-peak_levels-and-mem-algorithms","dir":"Articles","previous_headings":"","what":"Compare intensity_levels, peak_levels and mem algorithms","title":"Seasonal Burden Levels","text":"mem run default arguments.","code":"# Remove current season such as previous seasons predict for newest season previous_seasons <- tsd_data_all |>   dplyr::mutate(season = epi_calendar(time)) |>   dplyr::filter(season != \"2024/2025\") |>   dplyr::select(-season)  # Run mem algorithm mem_thresholds <- previous_seasons |>   dplyr::group_by(Data) |>   dplyr::group_modify(~ {     mem_data <- .x |>       dplyr::mutate(season = aedseo::epi_calendar(time),                     week = lubridate::isoweek(time)) |>       dplyr::select(-time) |>       tidyr::pivot_wider(names_from = season, values_from = observation) |>       dplyr::select(-week)     # Run mem     mem_result <- mem::memmodel(mem_data)     # Extract thresholds     mem_thresholds <- tibble::tibble(       `epidemic threshold \\n (mem)` = mem_result$epidemic.thresholds[1],       `medium` = mem_result$intensity.thresholds[1],       `high` = mem_result$intensity.thresholds[2],       `very high` = mem_result$intensity.thresholds[3]     )   })"},{"path":"https://ssi-dk.github.io/aedseo/articles/burden_levels.html","id":"aedseo-and-mem-levels","dir":"Articles","previous_headings":"Compare intensity_levels, peak_levels and mem algorithms","what":"aedseo and mem levels","title":"Seasonal Burden Levels","text":"plots: Observations 3 filtered improve visualization. y scale log transformed. Upon examining methods data combinations, becomes clear intensity_levels approach establishes levels covering entire set observations previous seasons. contrast, peak_levels mem methods define levels solely based highest observations within season, thus relevant comparing height peaks seasons. highest observations 2024/2025 season data set : relation highest observations upon examination, observe following: Plots Noise Noise Positive Trend: peak_levels mem estimate high breakpoints. occurs observations remain consistently elevated across three seasons, causing methods overlook remaining observations. Data Noise Positive Trend: three methods exhibit higher breakpoints, indicating successfully capture exponentially increasing trend seasons. Data Noise Negative Trend: observations exponentially decrease seasons (highest observation season 171), expect breakpoints lowest examples. expectation met across three methods. However, weighting seasons intensity_levels peak_levels leads older seasons less impact breakpoints, progress forward time. hand, mem includes high observations previous 10 seasons without diminishing importance older seasons, results sustained high breakpoints. Notably, mem method, epidemic threshold positioned slightly medium burden level. means epidemic period begins observations reach height seasonal peaks observed previous seasons. conclusion, peak_levels mem methods allows us compare height peaks seasons, whereas intensity_levels method supports continuous monitoring observations current season.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate Seasonal Epidemic Waves","text":"demonstrate seasonal variation time series accounting trends variability, use generate_seasonal_wave() function. function generates sinusoidal wave represent periodic fluctuations, dayly, weekly monthly cycles, also incorporating optional exponential trend random noise. makes suitable modeling realistic phenomena like infection rates. wave defined following equation: \\[ \\text{E[SeasonalWave}(t)\\text{]} = \\text{mean} + \\text{amplitude} \\cdot \\left( \\frac{\\left(\\sin\\left(\\frac{2\\pi t}{\\text{period}} + \\text{phase}\\right) + 1\\right)^{\\text{relative_epidemic_concentration}}} {2^{\\text{relative_epidemic_concentration} - 1}} - 1 \\right) \\cdot e^{\\log(\\text{trend_rate}) \\cdot t} \\] : \\(t\\): time variable (e.g., weeks months, represented x-axis). \\(\\text{amplitude}\\): Controls height oscillations; output varies \\(\\text{mean} \\pm \\text{amplitude}\\). \\(\\text{mean}\\): baseline value around seasonal wave oscillates. Must greater equal amplitude. \\(\\text{period}\\): Defines cycle length (e.g., 52 weeks yearly seasonality) (calculated based time_interval). \\(\\text{phase}\\): Adjusts horizontal position wave x-axis. \\(\\text{trend_rate}\\): Controls exponential growth decay trend time. \\(\\text{relative_epidemic_concentration}\\): Transforms reference sinusoidal season. value 1 gives pure sinusoidal curve, greater values concentrate epidemic around peak. Furthermore, noise can controlled noise_overdispersion parameter. 0: Deterministic, noise. 1: Poisson-distributed noise. >1: Negative binomial-distributed noise (higher values mean greater overdispersion). first step create transform simulated data tsd object using generate_seasonal_data() function. time_interval character vector specifying time interval, choose “day,” “week,” “month.”","code":"seasonal_wave_sim_weekly <- generate_seasonal_data(   years = 3,   start_date = as.Date(\"2021-05-26\"),   amplitude = 100,   mean = 100,   trend_rate = 1.003,   time_interval = \"week\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"plot-seasonal-waves","dir":"Articles","previous_headings":"","what":"Plot seasonal waves","title":"Simulate Seasonal Epidemic Waves","text":"aedseo package implemented plot() S3 method plot tsd object. time_interval argument can used visualise x-axis desired, either days, weeks months. following figures shows simulated data (solid circles) individual observations. solid line connects points, representing underlying mean trend three years weekly data.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"example-of-positive-trend-weekly-observations","dir":"Articles","previous_headings":"Plot seasonal waves","what":"Example of positive trend (weekly observations)","title":"Simulate Seasonal Epidemic Waves","text":"x-axis shows weeks years, y-axis represents simulated observations. simulation positive trend_rate, can seen observations increase exponentially across seasons.","code":"plot(seasonal_wave_sim_weekly, time_interval = \"5 weeks\")"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"example-of-negative-trend-monthly-observations","dir":"Articles","previous_headings":"Plot seasonal waves","what":"Example of negative trend (monthly observations)","title":"Simulate Seasonal Epidemic Waves","text":"x-axis shows months years, y-axis represents simulated observations. simulation negative trend_rate, can seen observations decrease exponentially across seasons.","code":"seasonal_wave_sim_monthly <- generate_seasonal_data(   years = 4,   start_date = as.Date(\"2021-05-26\"),   amplitude = 50,   mean = 50,   trend_rate = 0.99,   time_interval = \"month\" ) plot(   seasonal_wave_sim_monthly,   time_interval = \"3 months\",   y_label = \"Monthly observations\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"example-of-no-trend-daily-observations","dir":"Articles","previous_headings":"Plot seasonal waves","what":"Example of no trend (daily observations)","title":"Simulate Seasonal Epidemic Waves","text":"x-axis shows days, months, years, y-axis represents simulated observations. simulation trend.","code":"seasonal_wave_sim_daily <- generate_seasonal_data(   years = 3,   start_date = as.Date(\"2021-05-26\"),   amplitude = 50,   mean = 50,   time_interval = \"day\" ) plot(   seasonal_wave_sim_daily,   time_interval = \"50 days\",   y_label = \"Daily observations\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"example-of-phase-shift-daily-observations","dir":"Articles","previous_headings":"Plot seasonal waves","what":"Example of phase shift (daily observations)","title":"Simulate Seasonal Epidemic Waves","text":"phase shift sinusoidal pattern effectively shifts wave starts along x-axis instead peaking (hitting zero) times wave phase = 0 (like previous plot), shifted time. example phase = 1 rather 0, see rise fall sine wave happens later compared wave phase shift.","code":"seasonal_wave_sim_daily_phase_shift <- generate_seasonal_data(   years = 3,   start_date = as.Date(\"2021-05-26\"),   amplitude = 50,   mean = 50,   phase = 1,   time_interval = \"day\" ) plot(   seasonal_wave_sim_daily_phase_shift,   time_interval = \"50 days\",   y_label = \"Daily observations\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"examples-of-different-noise-scenarios","dir":"Articles","previous_headings":"Plot seasonal waves","what":"Examples of different noise scenarios","title":"Simulate Seasonal Epidemic Waves","text":"following examples illustrate varying noise_overdispersion affects realism variability simulated data, enabling modeling realistic epidemic scenarios. noise jumps observations, instead smoothly transitioning observations.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"deterministic-no-noise","dir":"Articles","previous_headings":"Plot seasonal waves > Examples of different noise scenarios","what":"Deterministic (no noise)","title":"Simulate Seasonal Epidemic Waves","text":"","code":"sim_no_noise <- generate_seasonal_data(   years = 3,   start_date = as.Date(\"2021-05-26\"),   amplitude = 100,   mean = 100,   noise_overdispersion = 0,   time_interval = \"week\" ) plot(   sim_no_noise,   time_interval = \"5 weeks\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"poisson-distributed-noise","dir":"Articles","previous_headings":"Plot seasonal waves > Examples of different noise scenarios","what":"Poisson-distributed noise","title":"Simulate Seasonal Epidemic Waves","text":"","code":"sim_poisson_noise <- generate_seasonal_data(   years = 3,   start_date = as.Date(\"2021-05-26\"),   amplitude = 100,   mean = 100,   noise_overdispersion = 1,   time_interval = \"week\" ) plot(   sim_poisson_noise,   time_interval = \"5 weeks\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"negative-binomial-distributed-noise-high-overdispersion","dir":"Articles","previous_headings":"Plot seasonal waves > Examples of different noise scenarios","what":"Negative binomial-distributed noise (high overdispersion)","title":"Simulate Seasonal Epidemic Waves","text":"","code":"sim_nb_noise <- generate_seasonal_data(   years = 3,   start_date = as.Date(\"2021-05-26\"),   amplitude = 100,   mean = 100,   noise_overdispersion = 5,   time_interval = \"week\" ) plot(   sim_nb_noise,   time_interval = \"5 weeks\" )"},{"path":[]},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"pure-sinusoidal-season","dir":"Articles","previous_headings":"Plot seasonal waves > Examples of different epidemic concentrations","what":"Pure sinusoidal season","title":"Simulate Seasonal Epidemic Waves","text":"","code":"sim_sinus <- generate_seasonal_data(   years = 2,   start_date = as.Date(\"2021-05-26\"),   amplitude = 100,   mean = 100,   relative_epidemic_concentration = 1,   time_interval = \"week\" ) plot(   sim_sinus,   time_interval = \"5 weeks\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/generate_seasonal_wave.html","id":"epidemic-concentrated-season","dir":"Articles","previous_headings":"Plot seasonal waves > Examples of different epidemic concentrations","what":"Epidemic concentrated season","title":"Simulate Seasonal Epidemic Waves","text":"following examples illustrate varying relative_epidemic_concentration affects time period observe observations. value increased, observations concentrated around peak. enables model improve ’s abbility model realistic epidemic scenarios, commonly see several weeks low infection rates shorter epidemic period.","code":"sim_conc <- generate_seasonal_data(   years = 2,   start_date = as.Date(\"2021-05-26\"),   amplitude = 100,   mean = 100,   relative_epidemic_concentration = 4,   time_interval = \"week\" ) plot(   sim_conc,   time_interval = \"5 weeks\" )"},{"path":"https://ssi-dk.github.io/aedseo/articles/seasonal_onset.html","id":"methodology","dir":"Articles","previous_headings":"","what":"Methodology","title":"Seasonal Epidemic Onset","text":"methodology used detect seasonal onset epidemics, can divided two essential criteria: local estimate exponential growth rate, \\(r\\), significantly greater zero. sum cases (SoC) past \\(k\\) units time exceeds disease-specific threshold. , \\(k\\) denotes window size employed obtain local estimate exponential growth rate SoC. criteria met, alarm triggered onset seasonal epidemic detected. model implemented seasonal_onset() function aedseo package. Criteria one fulfilled growth_warning output TRUE. Criteria two fulfilled sum_of_cases_warning output TRUE.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/seasonal_onset.html","id":"exponential-growth-rate","dir":"Articles","previous_headings":"Methodology","what":"Exponential growth rate","title":"Seasonal Epidemic Onset","text":"exponential growth rate, denoted \\(r\\), represents per capita change number new cases per unit time. Given incidence data integer-valued, proposed method relies generalized linear models (GLM). count data, Poisson distribution suitable choice model. Hence, count observations denoted \\(Y\\) assumed follow Poisson distribution \\[\\begin{equation} Y \\sim \\mathrm{Pois}(\\lambda) \\end{equation}\\] , link function, \\(\\log()\\), connects linear predictor expected value data point, expressed \\(\\log(\\lambda)=\\mu\\). Given single continuous covariate \\(t\\), mean \\(\\mu\\) can expressed \\[\\begin{equation}   \\mu = \\alpha + r t \\end{equation}\\] equivalent multiplicative model \\(\\lambda\\), .e. \\[\\begin{equation}   \\lambda = \\exp(\\alpha + r t) = \\exp(\\alpha) \\exp(r t) \\end{equation}\\] Intuitively, negative values \\(r\\) result decline number observed cases, \\(r=0\\) represents stability, positive values \\(r\\) indicate increase. important note Poisson distribution assumes mean variance equal. reality, real data often deviate assumption, variance (\\(v\\)) significantly larger mean. biological phenomenon, known overdispersion, can addressed within model various ways. One approach employ quasi-Poisson regression, assumes \\(v=\\sigma\\lambda\\), use negative binomial regression (implemented yet), assumes \\(v=\\lambda+\\lambda^2/\\theta\\), \\(\\sigma\\) \\(\\theta\\) overdispersion parameters.","code":""},{"path":"https://ssi-dk.github.io/aedseo/articles/seasonal_onset.html","id":"applying-the-seasonal_onset-algorithm","dir":"Articles","previous_headings":"","what":"Applying the seasonal_onset algorithm","title":"Seasonal Epidemic Onset","text":"First generate data tsd object, generate_seasonal_data() function. Next, tsd object passed seasonal_onset() function. , window size k=5 specified, meaning total 5 weeks used local estimate exponential growth rate. na_fraction_allowed = 0.4 defines large fraction observations k window allowed NA, 0.4*5 = 2 observations. Additionally, 95% confidence interval specified. Finally, exponential growth rate estimated using quasi-Poisson regression account overdispersion data. disease-specific threshold can additionally passed function, necessary growth rate estimations wanted. season_start season_end can used specify season stratify observations . algorithm runs across seasons, first observation new season use last k-1 observations previous season. seasonal_onset() function provides tsd_onset object comprehensive seasonal onset analysis.","code":"# Construct an 'tsd' object with time series data set.seed(222) tsd_data <- generate_seasonal_data(   years = 3,   start_date = as.Date(\"2020-10-18\"),   trend_rate = 1.002,   noise_overdispersion = 3,   relative_epidemic_concentration = 2,   time_interval = \"week\" ) seasonal_onset_results <- seasonal_onset(   tsd = tsd_data,   k = 5,   level = 0.95,   disease_threshold = 20,   family = \"quasipoisson\",   season_start = 21,   season_end = 20,   only_current_season = FALSE )"},{"path":"https://ssi-dk.github.io/aedseo/articles/seasonal_onset.html","id":"visualising-growth-rates","dir":"Articles","previous_headings":"","what":"Visualising Growth Rates","title":"Seasonal Epidemic Onset","text":"first figure, observations time shown legend seasonal onset alarm. second figure, local estimates growth rates presented along corresponding 95% confidence interval legend growth warning. visualisation can generated utilizing plot() S3 method objects tsd_onset class.","code":"plot(seasonal_onset_results)"},{"path":"https://ssi-dk.github.io/aedseo/articles/seasonal_onset.html","id":"predicting-growth-rates","dir":"Articles","previous_headings":"","what":"Predicting Growth Rates","title":"Seasonal Epidemic Onset","text":"predict() S3 method tsd_onset objects allows make predictions future time steps based estimated growth rates. Following example predict observations next 5 weekly time steps.  example , use predict method predict growth rates next 5 time steps, according time_interval = \"week\" tsd_onset object. n_step argument specifies number steps future want forecast. resulting tsd_predict object contains observation estimates, lower bounds, upper bounds time step.","code":"prediction <- predict(seasonal_onset_results, n_step = 5)"},{"path":"https://ssi-dk.github.io/aedseo/articles/seasonal_onset.html","id":"summarising-seasonal_onset-results","dir":"Articles","previous_headings":"","what":"Summarising seasonal_onset results","title":"Seasonal Epidemic Onset","text":"summary() S3 method tsd_onset objects provides concise summary automated early detection seasonal_onset analysis. can use retrieve important information analysis, including first seasonal onset alarm (reference time point), SoC reference time point (5 week window), growth rate estimates reference time point, total number growth warnings series latest warnings (growth SoC). helps quickly assess key findings analysis.","code":"summary(seasonal_onset_results) #> Summary of tsd_onset object with disease_threshold #>  #>       Model output: #>         Reference time point (first seasonal onset alarm in season): 2023-09-24 #>         Observations at reference time point: 38 #>         Sum of observations at reference time point: 102 #>         Growth rate estimate at reference time point: #>           Estimate   Lower (2.5%)   Upper (97.5%) #>             0.391     0.596          0.199 #>         Total number of growth warnings in the series: 52 #>         Latest growth warning: 2023-10-08 #>         Latest sum of cases warning: 2023-10-08 #>         Latest seasonal onset alarm: 2023-10-08 #>  #>       The season for reference time point: #>         2023/2024 #>  #>       Model settings: #>         Called using distributional family: quasipoisson #>         Window size for growth rate estimation and calculation of sum of cases: 5 #>         The time interval for the observations: week #>         Disease specific threshold: 20"},{"path":"https://ssi-dk.github.io/aedseo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sofia Myrup Otero. Author. Kasper Schou Telkamp. Author. Lasse Engbo Christiansen. Author, maintainer. Rasmus Skytte Randløv. Reviewer. . Copyright holder, funder.","code":""},{"path":"https://ssi-dk.github.io/aedseo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Otero S, Schou Telkamp K, Christiansen L (2025). aedseo: Automated Early Detection Seasonal Epidemic Onset Burden Levels. R package version 0.3.0, https://ssi-dk.github.io/aedseo/, https://github.com/ssi-dk/aedseo.","code":"@Manual{,   title = {aedseo: Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels},   author = {Sofia Myrup Otero and Kasper {Schou Telkamp} and Lasse Engbo Christiansen},   year = {2025},   note = {R package version 0.3.0, https://ssi-dk.github.io/aedseo/},   url = {https://github.com/ssi-dk/aedseo}, }"},{"path":[]},{"path":"https://ssi-dk.github.io/aedseo/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels","text":"Automated Early Detection Seasonal Epidemic Onset Burden Levels (aedseo) package provides powerful tool automating early detection seasonal epidemic onsets time series data. offers ability estimate growth rates consecutive time intervals calculate Sum Cases (SoC) within intervals. use disease-specific threshold also offers possibility estimate seasonal onset epidemics. Additionally offers ability estimate burden levels seasons based historical data. aimed towards epidemiologists, public health professionals, researchers seeking identify respond seasonal epidemics timely fashion.","code":""},{"path":"https://ssi-dk.github.io/aedseo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels","text":"","code":"# Install aedseo from CRAN install.packages(\"aedseo\")"},{"path":"https://ssi-dk.github.io/aedseo/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels","text":"can install development version aedseo GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ssi-dk/aedseo\")"},{"path":"https://ssi-dk.github.io/aedseo/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels","text":"quickly get started aedseo, follow steps: Install package using code provided . Load package library(aedseo). Create time series data object (tsd) data using to_time_series() function generate_seasonal_data() functions. Apply combined_seasonal_output() function get comprehensive seasonal analysis seasonal onset burden levels.","code":""},{"path":"https://ssi-dk.github.io/aedseo/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels","text":"detailed introduction workflow package, see Get Started vignette run; vignette(\"aedseo\").","code":""},{"path":"https://ssi-dk.github.io/aedseo/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels","text":"welcome contributions aedseo package. Feel free open issues, submit pull requests, provide feedback help us improve.","code":""},{"path":"https://ssi-dk.github.io/aedseo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Statens Serum Institut Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ssi-dk.github.io/aedseo/PULL_REQUEST_TEMPLATE.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"NA","text":"Please include summary change issue fixed. Please also include relevant motivation context. List dependencies required change. Fixes # (issue)","code":""},{"path":"https://ssi-dk.github.io/aedseo/PULL_REQUEST_TEMPLATE.html","id":"type-of-change","dir":"","previous_headings":"","what":"Type of Change","title":"NA","text":"Please delete options relevant. Minor fix (small change typo, formatting correction, non-functional improvement) Bug fix (non-breaking change fixes issue) New feature (non-breaking change adds functionality) Breaking change (fix feature cause existing functionality work expected) change requires documentation update","code":""},{"path":"https://ssi-dk.github.io/aedseo/PULL_REQUEST_TEMPLATE.html","id":"test","dir":"","previous_headings":"","what":"Test","title":"NA","text":"Please add tests adding new feature breaking change. Test added Test necessary","code":""},{"path":"https://ssi-dk.github.io/aedseo/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"Test","what":"Checklist","title":"NA","text":"PR passes local unit tests documented new features introduced PR adds new feature, please add entry NEWS.md reviewer assigned PR","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/aedseo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aedseo: Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels — aedseo-package","title":"aedseo: Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels — aedseo-package","text":"powerful tool automating early detection seasonal epidemic onsets time series data. offers ability estimate growth rates across consecutive time intervals, calculate sum cases (SoC) within intervals, estimate seasonal onsets within user defined seasons. use disease-specific threshold also offers possibility estimate seasonal onset epidemics. Additionally offers ability estimate burden levels seasons based historical data. aimed towards epidemiologists, public health professionals, researchers seeking identify respond seasonal epidemics timely fashion. reference growth rate estimation, see Walling Lipstich (2007) doi:10.1098/rspb.2006.3754  Obadia et al. (2012) doi:10.1186/1472-6947-12-147 . Seasonal burden level calculations inspired Moving Epidemic Method (MEM), see Vega Lozano (2012) doi:10.1111/j.1750-2659.2012.00422.x .","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/aedseo/reference/aedseo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aedseo: Automated and Early Detection of Seasonal Epidemic Onset and Burden Levels — aedseo-package","text":"Maintainer: Lasse Engbo Christiansen lsec@ssi.dk (ORCID) Authors: Sofia Myrup Otero smot@ssi.dk (ORCID) Kasper Schou Telkamp kasper.telkamp@gmail.com (ORCID) contributors: Rasmus Skytte Randløv rske@ssi.dk (ORCID) [reviewer] Statens Serum Institut, SSI [copyright holder, funder]","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/aedseo.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated aedseo function — aedseo","title":"Deprecated aedseo function — aedseo","text":"function renamed better reflect purpose. Please use seasonal_onset() instead.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/aedseo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated aedseo function — aedseo","text":"","code":"aedseo(...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/aedseo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated aedseo function — aedseo","text":"... Arguments passed seasonal_onset()","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplot a tsd object — autoplot","title":"Autoplot a tsd object — autoplot","text":"Generates complete 'ggplot' object suitable visualizing time series data tsd, tsd_onset tsd_onset_and_burden object. autoplot(tsd) Generates points observation connects line. autoplot(tsd_onset) first plot generates line connecting observations. transparency points reflects seasonal onset occurred. second plot presents growth rate observation along confidence intervals. transparency points indicates whether growth warning condition met. autoplot(tsd_onset_and_burden) Generates line connecting observations current season, along colored regions representing different burdens levels vertical line indicating outbreak start. y-axis scaled ggplot2::scale_y_log10 give better visualisation burden levels.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplot a tsd object — autoplot","text":"","code":"autoplot(object, ...)  # S3 method for tsd autoplot(   object,   line_width = 0.7,   obs_size = 2,   text_family = \"sans\",   time_interval_step = \"5 weeks\",   y_label = \"Weekly observations\",   ... )  # S3 method for tsd_onset autoplot(   object,   disease_color = \"black\",   line_width = 0.7,   obs_size = 2,   alpha_warning = 0.2,   alpha_ribbon = 0.1,   text_family = \"sans\",   legend_position = \"bottom\",   time_interval_step = \"5 weeks\",   y_label = \"Weekly observations\",   ... )  # S3 method for tsd_onset_and_burden autoplot(   object,   y_lower_bound = 5,   factor_to_max = 2,   disease_color = \"royalblue\",   season_start = 21,   season_end = season_start - 1,   time_interval_step = \"3 weeks\",   y_label = \"Weekly observations\",   text_burden_size = 10/2.8,   fill_alpha = c(0.45, 0.6, 0.75, 0.89, 1),   text_family = \"sans\",   line_color = \"black\",   line_type = \"solid\",   vline_color = \"red\",   vline_linetype = \"dashed\",   y_scale_labels = scales::label_comma(big.mark = \".\", decimal.mark = \",\"),   theme_custom = ggplot2::theme_bw(),   legend_position = \"right\",   ... )  # S3 method for tsd_growth_warning autoplot(   object,   k = 5,   skip_current_season = TRUE,   line_width = 1,   text_family = \"sans\",   legend_position = \"bottom\",   breaks_y_axis = 8,   ... )"},{"path":"https://ssi-dk.github.io/aedseo/reference/autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplot a tsd object — autoplot","text":"object tsd_onset object ... Additional arguments (used). line_width numeric specifying width line connecting observations. obs_size numeric, specifying size observational points. text_family character specifying font family text labels. time_interval_step character vector specifying time interval many time steps desired x-axis, e.g. '10 days', '4 weeks', '3 months'. y_label character vector specifying y label text. disease_color character specifying base color disease. alpha_warning numeric specifying alpha (transparency) observations seasonal_onset_alarm (first plot) significantly positive growth rate (second plot). alpha_ribbon numeric specifying alpha confidence intervals growth rate. legend_position character specifying position legend plot. y_lower_bound numeric specifying lower bound y-axis. factor_to_max numeric specifying factor multiply high burden level extending y-axis. season_start, season_end Integers giving start end weeks seasons stratify observations . text_burden_size numeric specifying size text labels. fill_alpha numeric vector specifying transparency levels fill colors burden levels. Must match number levels. line_color character specifying color line connecting observations. line_type character specifying line type observation line. vline_color character specifying color vertical outbreak start lines. vline_linetype character specifying line type outbreak start lines. y_scale_labels function format y-axis labels. theme_custom function ggplot2 theme, specifying theme apply plot. k integer specifying window size used create tsd_onset object. skip_current_season logical. want skip current season? breaks_y_axis numeric specifying many breaks show y-axis.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplot a tsd object — autoplot","text":"'ggplot' object visualizing tsd data. 'ggplot' object visualizing tsd_onset data. 'ggplot' object visualizing tsd_onset_and_burden data current season. 'ggplot' object visualizing tsd_growth_warning data.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplot a tsd object — autoplot","text":"","code":"set.seed(345) # Create an example `tsd` object time_series <- generate_seasonal_data() autoplot(time_series)   # Create an `tsd_onset` object time_series_with_onset <- seasonal_onset(   tsd = time_series,   k = 3,   level = 0.95,   family = \"quasipoisson\" ) autoplot(time_series_with_onset) #> $observed  #>  #> $growth_rate  #>   # Define `disease_threshold` disease_threshold <- 150  # Create a `tsd_onset_and_burden` object tsd_onset_burden <- combined_seasonal_output(   tsd = time_series,   disease_threshold = disease_threshold ) autoplot(tsd_onset_burden)   # Create an `tsd_onset` object tsd_onset <- seasonal_onset(   tsd = time_series,   k = 5,   family = \"quasipoisson\",   season_start = 21,   only_current_season = FALSE )  tsd_growth_warning <- consecutive_growth_warnings(tsd_onset)  autoplot(tsd_growth_warning)"},{"path":"https://ssi-dk.github.io/aedseo/reference/combined_seasonal_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute seasonal onset and burden levels from seasonal time series observations. — combined_seasonal_output","title":"Compute seasonal onset and burden levels from seasonal time series observations. — combined_seasonal_output","text":"function performs automated early detection seasonal epidemic onsets estimates burden levels time series dataset stratified season. seasonal onset estimates growth rates consecutive time intervals calculates sum cases. burden levels use previous seasons estimate levels current season.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/combined_seasonal_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute seasonal onset and burden levels from seasonal time series observations. — combined_seasonal_output","text":"","code":"combined_seasonal_output(   tsd,   disease_threshold = 20,   family = c(\"poisson\", \"quasipoisson\"),   family_quant = c(\"lnorm\", \"weibull\", \"exp\"),   season_start = 21,   season_end = season_start - 1,   only_current_season = TRUE,   ... )"},{"path":"https://ssi-dk.github.io/aedseo/reference/combined_seasonal_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute seasonal onset and burden levels from seasonal time series observations. — combined_seasonal_output","text":"tsd object containing time series data 'time' 'observation.' disease_threshold integer specifying threshold considering disease outbreak. seasonal onset defines per time-step disease threshold surpassed possibly trigger seasonal onset alarm. total number cases window size k exceeds disease_threshold * k, seasonal onset alarm can triggered. burden levels defines per time-step disease threshold surpassed observation included level calculations. family character string specifying family modeling  seasonal onset. family_quant character string specifying family modeling burden levels. season_start, season_end Integers giving start end weeks seasons stratify observations . only_current_season output include results current season? ... Arguments passed seasonal_burden_levels(), fit_percentiles() seasonal_onset() functions.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/combined_seasonal_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute seasonal onset and burden levels from seasonal time series observations. — combined_seasonal_output","text":"object containing two lists: onset_output burden_output: onset_output: seasonal_onset object containing: 'reference_time': time point growth rate estimated. 'observation': observation reference time point. 'season': stratification observables corresponding seasons. 'growth_rate': estimated growth rate. 'lower_growth_rate': lower bound growth rate's confidence interval. 'upper_growth_rate': upper bound growth rate's confidence interval. 'growth_warning': Logical. growth rate significantly higher zero? 'sum_of_cases': sum cases within time window. 'sum_of_cases_warning': Logical. Sum Cases exceed disease threshold? 'seasonal_onset_alarm': Logical. seasonal onset alarm? 'skipped_window': Logical. window skipped due missing? 'converged': Logical. IWLS judged converged? - 'seasonal_onset': Logical. first detected seasonal onset season? burden_output: list containing: 'season': season burden levels calculated . 'high_conf_level': (intensity_level method) conf_level chosen high level. 'conf_levels': (peak_level method) conf_levels chosen fit 'low', 'medium', 'high' levels. 'values': named vector values 'low', 'low', 'medium', 'high' levels. 'par': fit parameters chosen family. par_1: 'weibull': Shape parameter. 'lnorm': Mean log-transformed observations. 'exp': Rate parameter. 'par_2': 'weibull': Scale parameter. 'lnorm': Standard deviation log-transformed observations. 'exp': applicable (set NA). 'obj_value': value objective function - (negative log-likelihood), represent minimized objective function value optimisation. Smaller value equals better optimisation. 'converged': Logical. TRUE optimisation converged. 'family': distribution family used optimization. 'weibull': Uses Weibull distribution fitting. 'lnorm': Uses Log-normal distribution fitting. 'exp': Uses Exponential distribution fitting. 'disease_threshold': input disease threshold, also low level.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/combined_seasonal_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute seasonal onset and burden levels from seasonal time series observations. — combined_seasonal_output","text":"","code":"# Generate random flu season generate_flu_season <- function(start = 1, end = 1000) {   random_increasing_obs <- round(sort(runif(24, min = start, max = end)))   random_decreasing_obs <- round(rev(random_increasing_obs))    # Generate peak numbers   add_to_max <- c(50, 100, 200, 100)   peak <- add_to_max + max(random_increasing_obs)    # Combine into a single observations sequence   observations <- c(random_increasing_obs, peak, random_decreasing_obs)   return(observations) }  season_1 <- generate_flu_season() season_2 <- generate_flu_season()  start_date <- as.Date(\"2022-05-29\") end_date <- as.Date(\"2024-05-20\")  weekly_dates <- seq.Date(from = start_date,                          to = end_date,                          by = \"week\")  tsd_data <- tsd(   observation = c(season_1, season_2),   time = as.Date(weekly_dates),   time_interval = \"week\" ) #> Warning: `tsd()` was deprecated in aedseo 0.1.2. #> ℹ Please use `to_time_series()` instead.  # Run the main function combined_data <- combined_seasonal_output(tsd_data) # Print seasonal onset results print(combined_data$onset_output) #> # A tibble: 52 × 13 #>    reference_time observation season    growth_rate lower_growth_rate #>    <date>               <dbl> <chr>           <dbl>             <dbl> #>  1 2023-05-28               6 2023/2024     -0.427            -0.501  #>  2 2023-06-04              81 2023/2024     -0.156            -0.232  #>  3 2023-06-11             121 2023/2024      0.0834            0.0120 #>  4 2023-06-18             145 2023/2024      0.287             0.217  #>  5 2023-06-25             157 2023/2024      0.381             0.314  #>  6 2023-07-02             199 2023/2024      0.197             0.143  #>  7 2023-07-09             237 2023/2024      0.169             0.121  #>  8 2023-07-16             385 2023/2024      0.256             0.213  #>  9 2023-07-23             392 2023/2024      0.246             0.207  #> 10 2023-07-30             430 2023/2024      0.191             0.156  #> # ℹ 42 more rows #> # ℹ 8 more variables: upper_growth_rate <dbl>, growth_warning <lgl>, #> #   sum_of_cases <dbl>, sum_of_cases_warning <lgl>, seasonal_onset_alarm <lgl>, #> #   skipped_window <lgl>, converged <lgl>, seasonal_onset <lgl> # Print burden level results print(combined_data$burden_output) #> $season #> [1] \"2023/2024\" #>  #> $values #>   very low        low     medium       high  #>   20.00000   77.41445  299.64984 1159.86133  #>  #> $optim #> $optim$par #> [1] 6.94863952 0.06530442 #>  #> $optim$obj_value #> [1] 33.83299 #>  #> $optim$converged #> [1] TRUE #>  #> $optim$high_conf_level #> [1] 0.95 #>  #> $optim$family #> [1] \"lnorm\" #>  #>  #> $disease_threshold #> [1] 20 #>  #> attr(,\"class\") #> [1] \"tsd_burden_levels\""},{"path":"https://ssi-dk.github.io/aedseo/reference/consecutive_growth_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tsd_growth_warning object to count consecutive significant observations — consecutive_growth_warnings","title":"Create a tsd_growth_warning object to count consecutive significant observations — consecutive_growth_warnings","text":"function calculates number consecutive significant (\"growth_warning\") observations, grouping accordingly. result stored S3 object class tsd_threshold. Uses data tsd_onset object (output seasonal_onset()). seasonal_onset() run arguments; season_start season_end only_current_season = FALSE","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/consecutive_growth_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tsd_growth_warning object to count consecutive significant observations — consecutive_growth_warnings","text":"","code":"consecutive_growth_warnings(onset_output)"},{"path":"https://ssi-dk.github.io/aedseo/reference/consecutive_growth_warnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tsd_growth_warning object to count consecutive significant observations — consecutive_growth_warnings","text":"onset_output tsd_onset object returned seasonal_onset().","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/consecutive_growth_warnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tsd_growth_warning object to count consecutive significant observations — consecutive_growth_warnings","text":"object class tsd_growth_warning, containing; tibble processed observations, significant_counter column specifies sequence significant observation starts ends. first number many subsequent observations significant.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/consecutive_growth_warnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tsd_growth_warning object to count consecutive significant observations — consecutive_growth_warnings","text":"","code":"# Generate simulated data of seasonal waves sim_data <- generate_seasonal_data(   years = 5,   start_date = as.Date(\"2022-05-26\"),   trend_rate = 1.002,   noise_overdispersion = 2,   relative_epidemic_concentration = 3 )  # Estimate seasonal onset tsd_onset <- seasonal_onset(   tsd = sim_data,   family = \"quasipoisson\",   season_start = 21,   season_end = 20,   only_current_season = FALSE )  # Get consecutive significant observations consecutive_growth_warnings(tsd_onset) #> # A tibble: 256 × 16 #>    reference_time observation season    growth_rate lower_growth_rate #>    <date>               <dbl> <chr>           <dbl>             <dbl> #>  1 2022-06-23             101 2022/2023      0.218             0.110  #>  2 2022-06-30             113 2022/2023      0.226             0.130  #>  3 2022-07-07             159 2022/2023      0.288             0.234  #>  4 2022-07-14             152 2022/2023      0.200             0.111  #>  5 2022-07-21             155 2022/2023      0.109             0.0310 #>  6 2022-07-28             201 2022/2023      0.111             0.0389 #>  7 2022-08-04             197 2022/2023      0.0725            0.0166 #>  8 2022-08-11             237 2022/2023      0.113             0.0699 #>  9 2022-08-18             196 2022/2023      0.0599           -0.0220 #> 10 2022-08-25             235 2022/2023      0.0314           -0.0287 #> # ℹ 246 more rows #> # ℹ 11 more variables: upper_growth_rate <dbl>, growth_warning <lgl>, #> #   sum_of_cases <dbl>, sum_of_cases_warning <lgl>, seasonal_onset_alarm <lgl>, #> #   skipped_window <lgl>, converged <lgl>, counter <dbl>, changeFlag <lgl>, #> #   groupID <int>, significant_counter <dbl>"},{"path":"https://ssi-dk.github.io/aedseo/reference/epi_calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Epidemiological Season — epi_calendar","title":"Determine Epidemiological Season — epi_calendar","text":"function identifies epidemiological season, (must span new year) given date belongs. epidemiological season defined start end week, weeks numbered according ISO week date system.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/epi_calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Epidemiological Season — epi_calendar","text":"","code":"epi_calendar(date, start = 21, end = 20)"},{"path":"https://ssi-dk.github.io/aedseo/reference/epi_calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Epidemiological Season — epi_calendar","text":"date date object representing date check. start integer specifying start week epidemiological season. end integer specifying end week epidemiological season.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/epi_calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Epidemiological Season — epi_calendar","text":"character vector indicating season: \"out_of_season\" date outside specified season, within season, function returns character string indicating epidemiological season.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/epi_calendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Epidemiological Season — epi_calendar","text":"","code":"# Check if a date is within the epidemiological season epi_calendar(as.Date(\"2023-09-15\"), start = 21, end = 20) #> [1] \"2023/2024\" # Expected output: \"2023/2024\"  epi_calendar(as.Date(\"2023-05-30\"), start = 40, end = 20) #> [1] \"out_of_season\" # Expected output: \"out_of_season\"  try(epi_calendar(as.Date(\"2023-01-15\"), start = 1, end = 40)) #> Error in base::tryCatch(base::withCallingHandlers({ :  #>   1 assertions failed: #>  * `start` must be greater than `end`! # Expected error: \"`start` must be greater than `end`!\"  epi_calendar(as.Date(\"2023-10-06\"), start = 40, end = 11) #> [1] \"2023/2024\" # Expected output: \"2023/2024\""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_growth_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a growth rate model to time series observations. — fit_growth_rate","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"function fits growth rate model time series observations provides parameter estimates along confidence intervals.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_growth_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"","code":"fit_growth_rate(   observations,   level = 0.95,   family = c(\"poisson\", \"quasipoisson\") )"},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_growth_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"observations numeric vector containing time series observations. level confidence level parameter estimates, numeric value 0 1. family character string specifying family modeling. Choose \"poisson,\" \"quasipoisson\".","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_growth_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"list containing: 'fit': fitted growth rate model. 'estimate': numeric vector parameter estimates, including growth rate confidence interval. 'level': confidence level used estimating parameter confidence intervals.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_growth_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a growth rate model to time series observations. — fit_growth_rate","text":"","code":"# Fit a growth rate model to a time series of counts # (e.g., population growth) data <- c(100, 120, 150, 180, 220, 270) fit_growth_rate(   observations = data,   level = 0.95,   family = \"poisson\" ) #> $fit #>  #> Call:  stats::glm(formula = x ~ growth_rate, family = stats::poisson(link = \"log\"),  #>     data = growth_data) #>  #> Coefficients: #> (Intercept)  growth_rate   #>      4.4008       0.1992   #>  #> Degrees of Freedom: 5 Total (i.e. Null);  4 Residual #> Null Deviance:\t    116.2  #> Residual Deviance: 0.04923 \tAIC: 45.67 #>  #> $estimate #> growth_rate       2.5 %      97.5 %  #>   0.1992211   0.1624836   0.2362807  #>  #> $level #> [1] 0.95 #>"},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_percentiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits weighted observations to distribution and returns percentiles — fit_percentiles","title":"Fits weighted observations to distribution and returns percentiles — fit_percentiles","text":"function estimates percentiles weighted time series observations. output contains percentiles fitted distribution.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_percentiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits weighted observations to distribution and returns percentiles — fit_percentiles","text":"","code":"fit_percentiles(   weighted_observations,   conf_levels = c(0.5, 0.9, 0.95),   family = c(\"lnorm\", \"weibull\", \"exp\"),   optim_method = c(\"Nelder-Mead\", \"BFGS\", \"CG\", \"L-BFGS-B\", \"SANN\", \"Brent\"),   lower_optim = -Inf,   upper_optim = Inf )"},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_percentiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits weighted observations to distribution and returns percentiles — fit_percentiles","text":"weighted_observations tibble containing two columns length n; observation, contains data points, weight, importance assigned observation. Higher weights indicate observation influence model outcome, lower weights reduce impact. conf_levels numeric vector specifying confidence levels parameter estimates. values unique ascending order, lowest level first highest level last. family character string specifying family modeling optim_method character string specifying method used optimisation. Lookup ?optim::stats details methods. using exp family recommended use Brent one-dimensional optimisation. lower_optim numeric value optimisation. upper_optim numeric value optimisation.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_percentiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits weighted observations to distribution and returns percentiles — fit_percentiles","text":"list containing: 'conf_levels': conf_levels chosen fit percentiles. 'percentiles': percentile results fit. 'par': fit parameters chosen family. par_1: 'weibull': Shape parameter (k). 'lnorm': Mean log-transformed observations. 'exp': Rate parameter (rate). 'par_2': 'weibull': Scale parameter (scale). 'lnorm': Standard deviation log-transformed observations. 'exp': applicable (set NA). 'obj_value': value objective function - (negative log-likelihood), represent minimized objective function value optimisation. Smaller value equals better optimisation. 'converged': Logical. TRUE optimisation converged. 'family': distribution family used optimization. 'weibull': Uses Weibull distribution fitting. 'lnorm': Uses Log-normal distribution fitting. 'exp': Uses Exponential distribution fitting.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_percentiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits weighted observations to distribution and returns percentiles — fit_percentiles","text":"","code":"# Create three seasons with random observations obs <- 10 season <- c(\"2018/2019\", \"2019/2020\", \"2020/2021\") season_num_rev <- rev(seq(from = 1, to = length(season))) observations <- rep(stats::rnorm(10, obs), length(season))  # Add into a tibble with decreasing weight for older seasons data_input <- tibble::tibble(   observation = observations,   weight = 0.8^rep(season_num_rev, each = obs) )  # Use the model fit_percentiles(   weighted_observations = data_input,   conf_levels = c(0.50, 0.90, 0.95),   family= \"weibull\" ) #> $conf_levels #> [1] 0.50 0.90 0.95 #>  #> $values #> [1] 10.30143 11.17685 11.37846 #>  #> $par #> [1] 14.71951 10.56116 #>  #> $obj_value #> [1] 22.71257 #>  #> $converged #> [1] TRUE #>  #> $family #> [1] \"weibull\" #>"},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits weighted observations to distribution and returns quantiles — fit_quantiles","title":"Fits weighted observations to distribution and returns quantiles — fit_quantiles","text":"function calculates quantiles weighted time series observations. output contains quantiles fitted distribution.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits weighted observations to distribution and returns quantiles — fit_quantiles","text":"","code":"fit_quantiles(   weighted_observations,   conf_levels = c(0.5, 0.9, 0.95),   family = c(\"lnorm\", \"weibull\", \"exp\"),   optim_method = c(\"Nelder-Mead\", \"BFGS\", \"CG\", \"L-BFGS-B\", \"SANN\", \"Brent\"),   lower_optim = -Inf,   upper_optim = Inf )"},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits weighted observations to distribution and returns quantiles — fit_quantiles","text":"weighted_observations tibble containing two columns length n; observation, contains data points, weight, importance assigned observation. Higher weights indicate observation influence model outcome, lower weights reduce impact. conf_levels numeric vector specifying confidence levels parameter estimates. values unique ascending order, lowest level first highest level last. family character string specifying family modeling optim_method character string specifying method used optimisation. Lookup ?optim::stats details methods. using exp family recommended use Brent one-dimensional optimisation. lower_optim numeric value optimisation. upper_optim numeric value optimisation.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits weighted observations to distribution and returns quantiles — fit_quantiles","text":"list containing: 'conf_levels': conf_levels chosen fit quantiles. 'quantiles': quantile results fit. 'par': fit parameters chosen family. par_1: 'weibull': Shape parameter (k). 'lnorm': Mean log-transformed observations. 'exp': Rate parameter (λ). 'par_2': 'weibull': Scale parameter (λ). 'lnorm': Standard deviation log-transformed observations. 'exp': applicable (set NA). 'obj_value': value objective function - (negative log-likelihood), represent minimized objective function value optimisation. Smaller value equals better optimisation. 'converged': Logical. TRUE optimisation converged. 'family': distribution family used optimization. 'weibull': Uses Weibull distribution fitting. 'lnorm': Uses Log-normal distribution fitting. 'exp': Uses Exponential distribution fitting.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/fit_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits weighted observations to distribution and returns quantiles — fit_quantiles","text":"","code":"# Create three seasons with random observations obs <- 10 season <- c(\"2018/2019\", \"2019/2020\", \"2020/2021\") season_num_rev <- rev(seq(from = 1, to = length(season))) observations <- rep(stats::rnorm(10, obs), length(season))  # Add into a tibble with decreasing weight for older seasons data_input <- tibble::tibble(   observation = observations,   weight = 0.8^rep(season_num_rev, each = obs) )  # Use the model fit_quantiles(weighted_observations = data_input,               conf_levels = c(0.50, 0.90, 0.95),               family= \"weibull\") #> $conf_levels #> [1] 0.50 0.90 0.95 #>  #> $values #> [1] 10.26191 11.50034 11.79118 #>  #> $par #> [1] 10.53682 10.62514 #>  #> $obj_value #> [1] 29.21437 #>  #> $converged #> [1] TRUE #>  #> $family #> [1] \"weibull\" #>"},{"path":"https://ssi-dk.github.io/aedseo/reference/generate_seasonal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Simulated Data of Seasonal Waves as a tsd object — generate_seasonal_data","title":"Generate Simulated Data of Seasonal Waves as a tsd object — generate_seasonal_data","text":"function generates simulated dataset seasonal waves trend noise. function assumes 365 days, 52 weeks, 12 months per year. Leap years included calculation.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/generate_seasonal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Simulated Data of Seasonal Waves as a tsd object — generate_seasonal_data","text":"","code":"generate_seasonal_data(   years = 3,   start_date = as.Date(\"2021-05-26\"),   amplitude = 100,   mean = 100,   phase = 0,   trend_rate = NULL,   noise_overdispersion = NULL,   relative_epidemic_concentration = 1,   time_interval = c(\"week\", \"day\", \"month\"),   lower_bound = 1e-06 )"},{"path":"https://ssi-dk.github.io/aedseo/reference/generate_seasonal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Simulated Data of Seasonal Waves as a tsd object — generate_seasonal_data","text":"years integer specifying number years data simulate. start_date date representing start date simulated data. amplitude number specifying amplitude seasonal wave. output fluctuate within range [mean - amplitude, mean + amplitude]. mean number specifying mean seasonal wave. phase numeric value (radians) representing horizontal shift sine wave, hence phase shift seasonal wave. phase must zero 2*pi. trend_rate numeric value specifying exponential growth/decay rate. noise_overdispersion numeric value specifying overdispersion generated data. 0 means deterministic, 1 pure poisson values > 1 negative binomial assumed. relative_epidemic_concentration numeric transforms reference sinusoidal season. value 1 gives pure sinusoidal curve, greater values concentrate epidemic around peak. time_interval character vector specifying time interval. Choose 'day', 'week', 'month'. lower_bound numeric value can used ensure intensities always greater zero, needed noise_overdispersion different zero.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/generate_seasonal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Simulated Data of Seasonal Waves as a tsd object — generate_seasonal_data","text":"tsd object simulated data containing: 'time': time point observation observed. 'observation': observed value time point.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/generate_seasonal_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Simulated Data of Seasonal Waves as a tsd object — generate_seasonal_data","text":"","code":"# Generate simulated data of seasonal waves  #With default arguments default_sim <- generate_seasonal_data() plot(default_sim)   #With an exponential growth rate trend trend_sim <- generate_seasonal_data(trend_rate = 1.001) plot(trend_sim)   #With noise noise_sim <- generate_seasonal_data(noise_overdispersion = 2) plot(noise_sim)   #With distinct parameters, trend and noise sim_data <- generate_seasonal_data(   years = 2,   start_date = as.Date(\"2022-05-26\"),   amplitude = 2000,   mean = 3000,   trend_rate = 1.002,   noise_overdispersion = 1.1,   time_interval = c(\"week\") ) plot(sim_data, time_interval = \"2 months\")"},{"path":"https://ssi-dk.github.io/aedseo/reference/historical_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarises estimates like seasonal peak and onset from all available seasons — historical_summary","title":"Summarises estimates like seasonal peak and onset from all available seasons — historical_summary","text":"function summarises peak timing seasonal onset estimates tsd_onset object. can useful investigating current season falls within estimates previous seasons distinct previous seasons. Uses data tsd_onset object (output seasonal_onset()). seasonal_onset() run arguments; disease_threshold season_start season_end only_current_season = FALSE","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/historical_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarises estimates like seasonal peak and onset from all available seasons — historical_summary","text":"","code":"historical_summary(onset_output)"},{"path":"https://ssi-dk.github.io/aedseo/reference/historical_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarises estimates like seasonal peak and onset from all available seasons — historical_summary","text":"onset_output tsd_onset object returned seasonal_onset().","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/historical_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarises estimates like seasonal peak and onset from all available seasons — historical_summary","text":"object class historical_summary, containing: Usual time seasonal peak (weeks onset) week peak usually falls Usual peak intensity week onset usually falls Usual onset intensity growth rate estimates","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/historical_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarises estimates like seasonal peak and onset from all available seasons — historical_summary","text":"","code":"# Generate simulated data of seasonal waves sim_data <- generate_seasonal_data(   years = 5,   start_date = as.Date(\"2022-05-26\"),   trend_rate = 1.002,   noise_overdispersion = 1.1 )  # Estimate seasonal onset tsd_onset <- seasonal_onset(   tsd = sim_data,   disease_threshold = 20,   family = \"quasipoisson\",   season_start = 21,   season_end = 20,   only_current_season = FALSE )  # Get historical summary historical_summary(tsd_onset) #> # A tibble: 5 × 10 #>   season    onset_time peak_time  peak_intensity lower_growth_rate_onset #>   <chr>     <date>     <date>              <dbl>                   <dbl> #> 1 2022/2023 2022-07-21 2022-08-11            202                 0.0119  #> 2 2023/2024 2023-05-25 2023-08-31            247                 0.00917 #> 3 2024/2025 2024-05-23 2024-08-01            276                 0.0953  #> 4 2025/2026 2025-05-22 2025-07-24            286                 0.0424  #> 5 2026/2027 2026-05-21 2026-08-20            325                 0.0777  #> # ℹ 5 more variables: growth_rate_onset <dbl>, upper_growth_rate_onset <dbl>, #> #   onset_week <dbl>, peak_week <dbl>, weeks_to_peak <dbl>"},{"path":"https://ssi-dk.github.io/aedseo/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ssi-dk.github.io/aedseo/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete 'ggplot' appropriate to a particular data type — plot.tsd","title":"Create a complete 'ggplot' appropriate to a particular data type — plot.tsd","text":"function generates complete 'ggplot' object suitable visualizing time series data tsd, tsd_onset, tsd_onset_and_burden tsd_growth_warning objects.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete 'ggplot' appropriate to a particular data type — plot.tsd","text":"","code":"# S3 method for tsd plot(x, ...)  # S3 method for tsd_onset plot(x, ...)  # S3 method for tsd_onset_and_burden plot(x, ...)  # S3 method for tsd_growth_warning plot(x, ...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete 'ggplot' appropriate to a particular data type — plot.tsd","text":"x tsd, tsd_onset, tsd_onset_and_burden tsd_growth_warning object ... Additional arguments passed autoplot().","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete 'ggplot' appropriate to a particular data type — plot.tsd","text":"'ggplot' object visualizing output desired method.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/aedseo/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete 'ggplot' appropriate to a particular data type — plot.tsd","text":"","code":"# set.seed(321) # Create and plot `tsd` object tsd_obj <- generate_seasonal_data(   years = 3,   phase = 1,   start_date = as.Date(\"2021-10-18\") ) plot(tsd_obj)   disease_threshold <- 150  # Create and plot `tsd_onset` object tsd_onset_obj <- seasonal_onset(   tsd = tsd_obj,   k = 3,   level = 0.95,   disease_threshold = disease_threshold,   family = \"quasipoisson\" ) plot(tsd_onset_obj)    # Create a `tsd_onset_and_burden` object tsd_onset_burden_obj <- combined_seasonal_output(   tsd = tsd_obj,   disease_threshold = disease_threshold ) plot(tsd_onset_burden_obj,      y_lower_bound = ifelse(disease_threshold < 10, 1, 5))   # Create a `tsd_growth_warning` object tsd_onset_seasons <- seasonal_onset(   tsd = tsd_obj,   season_start = 21,   family = \"quasipoisson\",   only_current_season = FALSE ) tsd_gr_w <- consecutive_growth_warnings(tsd_onset_seasons) plot(tsd_gr_w)"},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.aedseo.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Growth Rates for Future Time Steps — predict.aedseo","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"function used predict future growth rates based model object created using 'aedseo' package. takes model object number future time steps (n_step) want make predictions returns prediction tibble.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.aedseo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"","code":"# S3 method for aedseo predict(object, n_step = 3, ...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.aedseo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"object model object created using aedseo package, typically result aedseo() function. n_step integer specifying number future time steps want predict growth rates. Default 3. ... Additional arguments (used).","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.aedseo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"tibble S3 object called aedseo containing predicted growth rates, including time, estimated growth rate, lower confidence interval, upper confidence interval specified number future time steps.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.aedseo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Growth Rates for Future Time Steps — predict.aedseo","text":"","code":"# Analyze the data using the aedseo package tsd_data <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  aedseo_results <- aedseo(   tsd = tsd_data,   k = 3,   level = 0.95,   family = \"poisson\" )  # Predict growth rates for the next 5 time steps prediction <- predict(object = aedseo_results, n_step = 5)  # Print the prediction print(prediction) #> # A tibble: 6 × 5 #>       t time       estimate lower upper #>   <int> <date>        <dbl> <dbl> <dbl> #> 1     0 2023-01-06     270   270   270  #> 2     1 2023-01-07     331.  301.  363. #> 3     2 2023-01-08     405.  336.  489. #> 4     3 2023-01-09     496.  375.  658. #> 5     4 2023-01-10     608.  418.  885. #> 6     5 2023-01-11     745.  467. 1191."},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.tsd_onset.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Observations for Future Time Steps — predict.tsd_onset","title":"Predict Observations for Future Time Steps — predict.tsd_onset","text":"function used predict future observations based tsd_onset object. uses time_interval attribute tsd_onset object make predictions.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.tsd_onset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Observations for Future Time Steps — predict.tsd_onset","text":"","code":"# S3 method for tsd_onset predict(object, n_step = 3, ...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.tsd_onset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Observations for Future Time Steps — predict.tsd_onset","text":"object tsd_onset object created using seasonal_onset() function. n_step integer specifying number future time steps want predict observations. ... Additional arguments (used).","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.tsd_onset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Observations for Future Time Steps — predict.tsd_onset","text":"tibble-like object called tsd_predict containing predicted observations, including reference time, lower confidence interval, upper confidence interval specified number future time steps.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/predict.tsd_onset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Observations for Future Time Steps — predict.tsd_onset","text":"","code":"# Generate predictions of time series data set.seed(123) time_series <- generate_seasonal_data(   years = 1,   time_interval = \"day\" ) # Apply `seasonal_onset` analysis time_series_with_onset <- seasonal_onset(   tsd = time_series,   k = 7 ) # Predict observations for the next 7 time steps predict(object = time_series_with_onset, n_step = 7) #> # A tibble: 8 × 5 #>       t reference_time estimate lower upper #>   <int> <date>            <dbl> <dbl> <dbl> #> 1     0 2022-05-25         100  100    100  #> 2     1 2022-05-26         102.  98.0  106. #> 3     2 2022-05-27         104.  96.1  112. #> 4     3 2022-05-28         106.  94.2  118. #> 5     4 2022-05-29         107.  92.3  125. #> 6     5 2022-05-30         109.  90.5  132. #> 7     6 2022-05-31         111.  88.7  140. #> 8     7 2022-06-01         113.  87.0  148."},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_burden_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute burden levels from seasonal time series observations of current season. — seasonal_burden_levels","title":"Compute burden levels from seasonal time series observations of current season. — seasonal_burden_levels","text":"function estimates burden levels time series observations stratified season. uses previous seasons estimate levels current season. output results regarding current season time series observations. NOTE: data must include data complete previous season make predictions current season.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_burden_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute burden levels from seasonal time series observations of current season. — seasonal_burden_levels","text":"","code":"seasonal_burden_levels(   tsd,   family = c(\"lnorm\", \"weibull\", \"exp\"),   season_start = 21,   season_end = season_start - 1,   method = c(\"intensity_levels\", \"peak_levels\"),   conf_levels = 0.95,   decay_factor = 0.8,   disease_threshold = 20,   n_peak = 6,   only_current_season = TRUE,   ... )"},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_burden_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute burden levels from seasonal time series observations of current season. — seasonal_burden_levels","text":"tsd object containing time series data 'time' 'observation.' family character string specifying family modeling season_start, season_end Integers giving start end weeks seasons stratify observations . method character string specifying model used level calculations. model predict levels current series observations. intensity_levels: models risk compared observed previous seasons. peak_levels: models risk compared observed n_peak observations season. conf_levels numeric vector specifying confidence levels parameter estimates. values unique ascending order, (.e. lowest level first highest level last). conf_levels specific method: intensity_levels specify highest confidence level e.g.: 0.95, highest intensity observed previous seasons. peak_levels specify three confidence levels e.g.: c(0.4, 0.9, 0.975), three confidence levels low, medium high reflect peak severity relative observed previous seasons. decay_factor numeric value 0 1, specifies weight applied previous seasons level calculations. used decay_factor^(number seasons back), whereby weight recent season decay_factor^0 = 1. parameter allows decreasing weight assigned prior seasons, influence older seasons diminishes exponentially. disease_threshold integer specifying threshold considering disease outbreak. defines per time-step disease threshold surpassed observation included level calculations. n_peak numeric value specifying number peak observations selected season level calculations. n_peak observations surpass disease_threshold included. only_current_season output include results current season? ... Arguments passed fit_percentiles() function.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_burden_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute burden levels from seasonal time series observations of current season. — seasonal_burden_levels","text":"list containing: 'season': season burden levels calculated . 'high_conf_level': (intensity_level method) conf_level chosen high level. 'conf_levels': (peak_level method) conf_levels chosen fit 'low', 'medium', 'high' levels. 'values': named vector values 'low', 'low', 'medium', 'high' levels. 'par': fit parameters chosen family. par_1: 'weibull': Shape parameter. 'lnorm': Mean log-transformed observations. 'exp': Rate parameter. 'par_2': 'weibull': Scale parameter. 'lnorm': Standard deviation log-transformed observations. 'exp': applicable (set NA). 'obj_value': value objective function - (negative log-likelihood), represent minimized objective function value optimisation. Smaller value equals better optimisation. 'converged': Logical. TRUE optimisation converged. 'family': distribution family used optimization. 'weibull': Uses Weibull distribution fitting. 'lnorm': Uses Log-normal distribution fitting. 'exp': Uses Exponential distribution fitting. 'disease_threshold': input disease threshold, also low level.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_burden_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute burden levels from seasonal time series observations of current season. — seasonal_burden_levels","text":"","code":"# Generate random flu season generate_flu_season <- function(start = 1, end = 1000) {   random_increasing_obs <- round(sort(runif(24, min = start, max = end)))   random_decreasing_obs <- round(rev(random_increasing_obs))    # Generate peak numbers   add_to_max <- c(50, 100, 200, 100)   peak <- add_to_max + max(random_increasing_obs)    # Combine into a single observations sequence   observations <- c(random_increasing_obs, peak, random_decreasing_obs)   return(observations) }  season_1 <- generate_flu_season() season_2 <- generate_flu_season()  start_date <- as.Date(\"2022-05-29\") end_date <- as.Date(\"2024-05-20\")  weekly_dates <- seq.Date(from = start_date,                          to = end_date,                          by = \"week\")  tsd_data <- tsd(   observation = c(season_1, season_2),   time = as.Date(weekly_dates),   time_interval = \"week\" )  # Print seasonal burden results seasonal_burden_levels(tsd_data, family = \"lnorm\") #> $season #> [1] \"2023/2024\" #>  #> $values #>   very low        low     medium       high  #>   20.00000   77.96614  303.93594 1184.83559  #>  #> $optim #> $optim$par #> [1] 6.97243417 0.06378995 #>  #> $optim$obj_value #> [1] 33.83526 #>  #> $optim$converged #> [1] TRUE #>  #> $optim$high_conf_level #> [1] 0.95 #>  #> $optim$family #> [1] \"lnorm\" #>  #>  #> $disease_threshold #> [1] 20 #>  #> attr(,\"class\") #> [1] \"tsd_burden_levels\""},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_onset.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated and Early Detection of Seasonal Epidemic Onset — seasonal_onset","title":"Automated and Early Detection of Seasonal Epidemic Onset — seasonal_onset","text":"function performs automated early detection seasonal epidemic onsets time series dataset. estimates growth rates consecutive time intervals calculates sum cases (sum_of_cases).","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_onset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated and Early Detection of Seasonal Epidemic Onset — seasonal_onset","text":"","code":"seasonal_onset(   tsd,   k = 5,   level = 0.95,   disease_threshold = NA_integer_,   family = c(\"poisson\", \"quasipoisson\"),   na_fraction_allowed = 0.4,   season_start = NULL,   season_end = season_start - 1,   only_current_season = NULL )"},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_onset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated and Early Detection of Seasonal Epidemic Onset — seasonal_onset","text":"tsd object containing time series data 'time' 'observation.' k integer specifying window size modeling growth rates onset. level confidence level onset parameter estimates, numeric value 0 1. disease_threshold integer specifying threshold considering disease outbreak. defines per time-step disease threshold surpassed possibly trigger seasonal onset alarm. total number cases window size k exceeds disease_threshold * k, seasonal onset alarm can triggered. family character string specifying family modeling na_fraction_allowed Numeric value 0 1 specifying fraction observables window size k allowed NA zero, .e. without cases, onset calculations. season_start, season_end Integers giving start end weeks seasons stratify observations . set NULL, means stratification season. only_current_season output include results current season?","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_onset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated and Early Detection of Seasonal Epidemic Onset — seasonal_onset","text":"seasonal_onset object containing: 'reference_time': time point growth rate estimated. 'observation': observation reference time point. 'season': stratification observables corresponding seasons. 'growth_rate': estimated growth rate. 'lower_growth_rate': lower bound growth rate's confidence interval. 'upper_growth_rate': upper bound growth rate's confidence interval. 'growth_warning': Logical. growth rate significantly higher zero? 'sum_of_cases': sum cases within time window. 'sum_of_cases_warning': Logical. Sum Cases exceed disease threshold? 'seasonal_onset_alarm': Logical. seasonal onset alarm? 'skipped_window': Logical. window skipped due missing? 'converged': Logical. IWLS judged converged? - 'seasonal_onset': Logical. first detected seasonal onset season?","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/seasonal_onset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated and Early Detection of Seasonal Epidemic Onset — seasonal_onset","text":"","code":"# Create a tibble object from sample data tsd_data <- tsd(   observation = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  # Estimate seasonal onset with a 3-day window and a Poisson family model seasonal_onset(   tsd = tsd_data,   k = 3,   level = 0.95,   disease_threshold = 20,   family = \"poisson\",   na_fraction_allowed = 0.4,   season_start = NULL,   season_end = NULL,   only_current_season = NULL ) #> # A tibble: 4 × 13 #>   reference_time observation season      growth_rate lower_growth_rate #>   <date>               <dbl> <chr>             <dbl>             <dbl> #> 1 2023-01-03             150 not_defined       0.204            0.0785 #> 2 2023-01-04             180 not_defined       0.201            0.0874 #> 3 2023-01-05             220 not_defined       0.192            0.0891 #> 4 2023-01-06             270 not_defined       0.203            0.109  #> # ℹ 8 more variables: upper_growth_rate <dbl>, growth_warning <lgl>, #> #   sum_of_cases <dbl>, sum_of_cases_warning <lgl>, seasonal_onset_alarm <lgl>, #> #   skipped_window <lgl>, converged <lgl>, seasonal_onset <lgl>"},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.aedseo.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for aedseo objects — summary.aedseo","title":"Summary method for aedseo objects — summary.aedseo","text":"Summarize results aedseo analysis, including latest growth rate estimate, confidence interval, information growth warnings.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.aedseo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for aedseo objects — summary.aedseo","text":"","code":"# S3 method for aedseo summary(object, ...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.aedseo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for aedseo objects — summary.aedseo","text":"object object class 'aedseo' containing results aedseo analysis. ... Additional arguments (used).","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.aedseo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for aedseo objects — summary.aedseo","text":"function used side effect, printing summary message console.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.aedseo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for aedseo objects — summary.aedseo","text":"","code":"# Create a tsibble object from sample data tsd_data <- tsd(   observed = c(100, 120, 150, 180, 220, 270),   time = as.Date(c(     \"2023-01-01\",     \"2023-01-02\",     \"2023-01-03\",     \"2023-01-04\",     \"2023-01-05\",     \"2023-01-06\"   )),   time_interval = \"day\" )  # Calculate aedseo with a 3-day window and a Poisson family model aedseo_results <- aedseo(   tsd = tsd_data,   k = 3,   level = 0.95,   family = \"poisson\" ) # Print the summary of the aedseo_results to the console summary(aedseo_results) #> Summary of aedseo Object #>  #>     Called using distributional family: #>       poisson #>  #>     Window size for growth rate estimation and #>     calculation of sum of cases: #>       3 #>  #>     Disease specific threshold: #>       NA #>  #>     Reference time point: #>       2023-01-06 #>  #>     Sum of cases at reference time point: #>       670 #>     Latest sum of cases warning: #>       NA #>  #>     Growth rate estimate at reference time point: #>       Estimate   Lower (2.5%)   Upper (97.5%) #>          0.203     0.109          0.297 #>  #>     Total number of growth warnings in the series: #>       4 #>     Latest growth warning: #>       2023-01-06 #>  #>     Latest seasonal onset alarm: #>       NA"},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_burden_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for tsd_burden_levels objects — summary.tsd_burden_levels","title":"Summary method for tsd_burden_levels objects — summary.tsd_burden_levels","text":"Summarize key results seasonal burden levels analysis.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_burden_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for tsd_burden_levels objects — summary.tsd_burden_levels","text":"","code":"# S3 method for tsd_burden_levels summary(object, ...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_burden_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for tsd_burden_levels objects — summary.tsd_burden_levels","text":"object object class 'tsd_burden_levels' containing results seasonal_burden_levels analysis. ... Additional arguments (used).","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_burden_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for tsd_burden_levels objects — summary.tsd_burden_levels","text":"function used side effect, printing burden levels.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_burden_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for tsd_burden_levels objects — summary.tsd_burden_levels","text":"","code":"# Create a `tsd` object tsd_data <- generate_seasonal_data()  # Create a `tsd_burden_levels` object tsd_burden_levels <- seasonal_burden_levels(   tsd = tsd_data ) # Print the summary summary(tsd_burden_levels) #> Summary of tsd_burden_levels object #>  #>     Breakpoint estimates: #>       very low : 20.000000 #>       low: 43.155941 #>       medium: 93.121762 #>       high: 200.937862 #>  #>     The season for the burden levels: #>       2023/2024 #>  #>     Model settings: #>       Disease specific threshold: 20 #>       Called using distributional family: lnorm"},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_onset.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for tsd_onset objects — summary.tsd_onset","title":"Summary method for tsd_onset objects — summary.tsd_onset","text":"Summarize key results seasonal onset analysis.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_onset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for tsd_onset objects — summary.tsd_onset","text":"","code":"# S3 method for tsd_onset summary(object, ...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_onset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for tsd_onset objects — summary.tsd_onset","text":"object object class 'tsd_onset' containing results seasonal_onset analysis. ... Additional arguments (used).","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_onset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for tsd_onset objects — summary.tsd_onset","text":"function used side effect, printing summary message console.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/summary.tsd_onset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for tsd_onset objects — summary.tsd_onset","text":"","code":"# Create a `tsd` object tsd_data <- generate_seasonal_data()  # Create a `tsd_onset` object tsd_onset <- seasonal_onset(   tsd = tsd_data,   k = 3,   disease_threshold = 100,   season_start = 21,   season_end = 20,   level = 0.95,   family = \"poisson\",   only_current_season = TRUE ) # Print the summary summary(tsd_onset)"},{"path":"https://ssi-dk.github.io/aedseo/reference/to_time_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tibble-like tsd (time-series data) object from observed data and corresponding dates. — to_time_series","title":"Create a tibble-like tsd (time-series data) object from observed data and corresponding dates. — to_time_series","text":"function takes observations corresponding date vector converts tsd object, time series data structure can used time series analysis.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/to_time_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tibble-like tsd (time-series data) object from observed data and corresponding dates. — to_time_series","text":"","code":"to_time_series(observation, time, time_interval = c(\"day\", \"week\", \"month\"))"},{"path":"https://ssi-dk.github.io/aedseo/reference/to_time_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tibble-like tsd (time-series data) object from observed data and corresponding dates. — to_time_series","text":"observation numeric vector containing observations. time date vector containing corresponding dates. time_interval character vector specifying time interval. Choose 'day', 'week', 'month'.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/to_time_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tibble-like tsd (time-series data) object from observed data and corresponding dates. — to_time_series","text":"tsd object containing: 'time': time point observation observed. 'observation': observed value time point.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/to_time_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tibble-like tsd (time-series data) object from observed data and corresponding dates. — to_time_series","text":"","code":"# Create a `tsd` object from daily data daily_tsd <- to_time_series(   observation = c(10, 15, 20, 18),   time = as.Date(     c(\"2023-01-01\", \"2023-01-02\", \"2023-01-03\", \"2023-01-04\")   ),   time_interval = \"day\" )  # Create a `tsd` object from weekly data weekly_tsd <- to_time_series(   observation = c(100, 120, 130),   time = as.Date(     c(\"2023-01-01\", \"2023-01-08\", \"2023-01-15\")   ),   time_interval = \"week\" )  # Create a `tsd` object from monthly data monthly_tsd <- to_time_series(   observation = c(500, 520, 540),   time = as.Date(     c(\"2023-01-01\", \"2023-02-01\", \"2023-03-01\")   ),   time_interval = \"month\" )"},{"path":"https://ssi-dk.github.io/aedseo/reference/tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated tsd function — tsd","title":"Deprecated tsd function — tsd","text":"function renamed better reflect purpose. Please use to_time_series() instead.","code":""},{"path":"https://ssi-dk.github.io/aedseo/reference/tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated tsd function — tsd","text":"","code":"tsd(...)"},{"path":"https://ssi-dk.github.io/aedseo/reference/tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated tsd function — tsd","text":"... Arguments passed to_time_series()","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"aedseo-030","dir":"Changelog","previous_headings":"","what":"aedseo 0.3.0","title":"aedseo 0.3.0","text":"CRAN release: 2025-04-09","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"deprecations-0-3-0","dir":"Changelog","previous_headings":"","what":"Deprecations","title":"aedseo 0.3.0","text":"aedseo() now deprecated. Please use seasonal_onset() instead. warning shown using aedseo() (#41). tsd() now deprecated. Please use to_time_series() instead. warning shown using tsd() (#41).","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"features-0-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"aedseo 0.3.0","text":"Added seasonal_burden_levels() function, calculates burden levels based data previous seasons two different methods; “peak_levels” “intensity_levels” (#37). Added fit_percentiles() function, optimises user selected distribution calculates percentiles based observations weights. meant used within seasonal_burden_levels() function (#35, #37) - Renamed fit_quantiles() fit_percentiles() (#60). Added combined_seasonal_output() main function run seasonal_onset() seasonal_burden_levels() get combined result newest season (#44). Added consecutive_growth_warnings() function help user method define disease-specific threshold (#80). Added new argument only_current_season seasonal_onset(), seasonal_burden_levels() combined_seasonal_output() gives possibility either get output current season available seasons (#45). Added historical_summary() uses tsd_onset object summarise historical estimations (#75). summary() can now summarise tsd_burden_level objects (#60). plot() autoplot() can now plot tsd_combined_seasonal_output tsd_consecutive_growth_warning objects (#57, #80). Added generate_seasonal_data() generate synthetic data testing documentation purposes (#56). Added seasonal_onset() replacement deprecated aedseo() function (#41). Added to_time_series() replacement deprecated tsd() function (#41).","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"aedseo 0.3.0","text":"Enhanced clarity user guidance vignettes: vignette(\"generate_seasonal_wave\"), vignette(\"aedseo\"), vignette(\"seasonal_onset\") vignette(\"burden_levels\") providing comprehensive walkthrough application functions provided aedseo package detailed explanations illustrative examples (#56, #57, #58, #59, #60, #61). Improved autoplot() function can now visualise dates days, weeks months x-axis time_interval argument (#56). Improved epi_calendar() function work season spanning new year (#34). Using predict() tsd_onset objects now uses time-scale given object (#61). , time_interval attribute controls predictions “days”, “weeks” “months”. aedseo() function now allows choice adding season input argument (#34). checkmate assertions added enhance user feedback clearer error messages ensure functions operate correctly validating inputs (#33). Improved aedseo() function work NA values. user now defines many NA values function allow window (#32).","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"minor-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"aedseo 0.3.0","text":"Added Sofia Myrup Otero author R package (#55). Added Rasmus Skytte Randløv reviewer R package (#55). disease_threshold argument now reflects disease threshold one time step. total number cases window size k exceeds disease_threshold * k, seasonal onset alarm can triggered (#32).","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"aedseo-012","dir":"Changelog","previous_headings":"","what":"aedseo 0.1.2","title":"aedseo 0.1.2","text":"CRAN release: 2023-11-27","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"minor-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"aedseo 0.1.2","text":"Transferring maintainership R package Lasse Engbo Christiansen.","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"aedseo-011","dir":"Changelog","previous_headings":"","what":"aedseo 0.1.1","title":"aedseo 0.1.1","text":"CRAN release: 2023-11-16","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"improvements-0-1-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"aedseo 0.1.1","text":"Enhanced clarity user guidance introductory vignette, providing comprehensive walkthrough application ‘aeddo’ algorithm time series data detailed explanations illustrative examples.","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"minor-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"aedseo 0.1.1","text":"Updated LICENSE.md Statens Serum Institut copyright holder. Fixed installation guide development version README.Rmd README.md Added Lasse Engbo Christiansen author R package. Added new function epi_calendar() determines epidemiological season based given date, allowing users easily categorize dates within outside specified seasons. Introduced additional visualizations autoplot() method, enhancing capabilities plot() method new displays observed cases growth rates.","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"aedseo-010","dir":"Changelog","previous_headings":"","what":"aedseo 0.1.0","title":"aedseo 0.1.0","text":"CRAN release: 2023-11-07","code":""},{"path":"https://ssi-dk.github.io/aedseo/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"aedseo 0.1.0","text":"Added aedseo function, automates early detection seasonal epidemic onsets estimating growth rates consecutive time intervals calculating Sum Cases (sum_of_cases). Introduced autoplot plot methods visualizing aedseo aedseo_tsd objects. functions allow create insightful ggplot2 plots data. Included fit_growth_rate function, enabling users fit growth rate models time series observations. Introduced predict method aedseo objects, allows predict observations future time steps given growth rates. Added summary method aedseo objects, providing comprehensive summary results. Introduced tsd function, allowing users create S3 aedseo_tsd (time-series data) objects observed data corresponding dates.","code":""}]
